<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Core</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.AsyncDuplexStreamingConnection`2">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IAsyncDuplexStreamingConnection`2"/> interface
            </summary>
            <typeparam name="TOutbound">The type of outbound messages, meaning messages sent to the server</typeparam>
            <typeparam name="TInbound">The type of inbound messages, meaning messages received from the server</typeparam>
        </member>
        <member name="M:Neuroglia.AsyncDuplexStreamingConnection`2.#ctor(Neuroglia.IAsyncStreamWriter{`0},Neuroglia.IAsyncStreamReader{`1})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.AsyncDuplexStreamingConnection`2"/>
            </summary>
            <param name="outboundStream">The service used to write messages to the outbound stream</param>
            <param name="inboundStream">The service used to read messages from the inbound stream</param>
        </member>
        <member name="P:Neuroglia.AsyncDuplexStreamingConnection`2.OutboundStream">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.AsyncDuplexStreamingConnection`2.InboundStream">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.AsyncLock">
            <summary>
            Represents an object used to lock aynschronous processes
            </summary>
            <remarks>Code based on <see href="https://medium.com/swlh/async-lock-mechanism-on-asynchronous-programing-d43f15ad0b3"/></remarks>
        </member>
        <member name="M:Neuroglia.AsyncLock.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.AsyncLock"/>
            </summary>
        </member>
        <member name="M:Neuroglia.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Locks asynchronously
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new object which releases the lock upon disposal</returns>
        </member>
        <member name="T:Neuroglia.AsyncStreamReader`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IAsyncStreamReader`1"/> interface
            </summary>
            <typeparam name="T">The type of data to read</typeparam>
        </member>
        <member name="M:Neuroglia.AsyncStreamReader`1.#ctor(System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.AsyncStreamReader`1"/>
            </summary>
            <param name="stream">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to read</param>
        </member>
        <member name="P:Neuroglia.AsyncStreamReader`1.Stream">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to read
            </summary>
        </member>
        <member name="P:Neuroglia.AsyncStreamReader`1.Reader">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> used to enumerate the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to read
            </summary>
        </member>
        <member name="P:Neuroglia.AsyncStreamReader`1.Current">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.AsyncStreamReader`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.AsyncStreamWriter`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IAsyncStreamWriter`1"/> interface
            </summary>
            <typeparam name="T">The type of data to write</typeparam>
        </member>
        <member name="M:Neuroglia.AsyncStreamWriter`1.#ctor(System.Threading.Channels.ChannelWriter{`0})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.AsyncStreamWriter`1"/>
            </summary>
            <param name="writer">The <see cref="T:System.Threading.Channels.ChannelWriter`1"/> used to write data to the stream</param>
        </member>
        <member name="P:Neuroglia.AsyncStreamWriter`1.Writer">
            <summary>
            Gets the <see cref="T:System.Threading.Channels.ChannelWriter`1"/> used to write data to the stream
            </summary>
        </member>
        <member name="M:Neuroglia.AsyncStreamWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.DataTransferObjectTypeAttribute">
            <summary>
            Represents an <see cref="T:System.Attribute"/> used to specify the Data Transfer Object of an entity
            </summary>
        </member>
        <member name="M:Neuroglia.DataTransferObjectTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.DataTransferObjectTypeAttribute"/>
            </summary>
            <param name="type">The type of the object's DTO</param>
        </member>
        <member name="P:Neuroglia.DataTransferObjectTypeAttribute.Type">
            <summary>
            Gets the type of the object's DTO
            </summary>
        </member>
        <member name="T:Neuroglia.DiscriminatorAttribute">
            <summary>
            Represents the <see cref="T:System.Attribute"/> used to indicate the property used to discriminate derived types of the marked class
            </summary>
        </member>
        <member name="M:Neuroglia.DiscriminatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.DiscriminatorAttribute"/>
            </summary>
            <param name="property">The name of the property used to discriminate derived types of the class marked by the <see cref="T:Neuroglia.DiscriminatorAttribute"/></param>
        </member>
        <member name="P:Neuroglia.DiscriminatorAttribute.Property">
            <summary>
            Gets the name of the property used to discriminate derived types of the class marked by the <see cref="T:Neuroglia.DiscriminatorAttribute"/>
            </summary>
        </member>
        <member name="T:Neuroglia.DiscriminatorValueAttribute">
            <summary>
            Represents the <see cref="T:System.Attribute"/> used to indicate the discriminator value of a derived type
            </summary>
        </member>
        <member name="M:Neuroglia.DiscriminatorValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.DiscriminatorValueAttribute"/>
            </summary>
            <param name="value">The value used to discriminate the derived type marked by the <see cref="T:Neuroglia.DiscriminatorValueAttribute"/></param>
        </member>
        <member name="P:Neuroglia.DiscriminatorValueAttribute.Value">
            <summary>
            Gets the value used to discriminate the derived type marked by the <see cref="T:Neuroglia.DiscriminatorValueAttribute"/>
            </summary>
        </member>
        <member name="T:Neuroglia.CommandDto">
            <summary>
            Represents the base class for all command DTOs
            </summary>
        </member>
        <member name="T:Neuroglia.ConcurrencyException">
            <summary>
            Represents the <see cref="T:System.Exception"/> thrown when a concurrency error occurs
            </summary>
        </member>
        <member name="M:Neuroglia.ConcurrencyException.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.ConcurrencyException"/>
            </summary>
        </member>
        <member name="M:Neuroglia.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.ConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Neuroglia.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.ConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Neuroglia.DataTransferObject">
            <summary>
            Represents the base class for all Data Transfer Objects (DTOs)
            </summary>
        </member>
        <member name="T:Neuroglia.EntityDto`1">
            <summary>
            Describes an entity Data Transfer Object (DTO)
            </summary>
            <typeparam name="TKey">The type of key the descibed entity is uniquely identified by</typeparam>
        </member>
        <member name="P:Neuroglia.EntityDto`1.Id">
            <summary>
            Gets/sets the entity's id
            </summary>
        </member>
        <member name="P:Neuroglia.EntityDto`1.CreatedAt">
            <summary>
            Gets/sets the date and time the entity has been created at
            </summary>
        </member>
        <member name="P:Neuroglia.EntityDto`1.LastModified">
            <summary>
            Gets/sets the date and time the entity has last been modified
            </summary>
        </member>
        <member name="P:Neuroglia.EntityDto`1.StateVersion">
            <summary>
            Gets/sets the entity's state version
            </summary>
        </member>
        <member name="T:Neuroglia.Enumeration">
            <summary>
            Represents the base class for all enumeration classes
            </summary>
        </member>
        <member name="M:Neuroglia.Enumeration.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Enumeration"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Enumeration.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Enumeration"/>
            </summary>
            <param name="value">The <see cref="T:Neuroglia.Enumeration"/>'s value</param>
            <param name="name">The <see cref="T:Neuroglia.Enumeration"/>'s name</param>
        </member>
        <member name="P:Neuroglia.Enumeration.Value">
            <summary>
            Gets the <see cref="T:Neuroglia.Enumeration"/>'s value
            </summary>
        </member>
        <member name="P:Neuroglia.Enumeration.Name">
            <summary>
            Gets the <see cref="T:Neuroglia.Enumeration"/>'s name
            </summary>
        </member>
        <member name="M:Neuroglia.Enumeration.Equals(System.Object)">
            <summary>
            Determines whether or not the <see cref="T:Neuroglia.Enumeration"/> equals another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.Enumeration"/> equals another object</returns>
        </member>
        <member name="M:Neuroglia.Enumeration.CompareTo(System.Object)">
            <summary>
            Compares the <see cref="T:Neuroglia.Enumeration"/> to another object
            </summary>
            <param name="other">The object to compare</param>
            <returns>The comparison result</returns>
        </member>
        <member name="M:Neuroglia.Enumeration.GetHashCode">
            <summary>
            Gets the <see cref="T:Neuroglia.Enumeration"/>'s hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Enumeration.ToString">
            <summary>
            Gets the <see cref="T:Neuroglia.Enumeration"/>'s string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Enumeration.GetAll``1">
            <summary>
            Gets all the values of the <see cref="T:Neuroglia.Enumeration"/> of the specified type
            </summary>
            <typeparam name="T">The type of the <see cref="T:Neuroglia.Enumeration"/> to list all values of</typeparam>
            <returns>All the values of the <see cref="T:Neuroglia.Enumeration"/> of the specified type</returns>
        </member>
        <member name="M:Neuroglia.Enumeration.FromValue``1(System.Int32)">
            <summary>
            Parses the specified value into an <see cref="T:Neuroglia.Enumeration"/> class
            </summary>
            <typeparam name="T">The type of <see cref="T:Neuroglia.Enumeration"/> to parse the value into</typeparam>
            <param name="value">The value to parse</param>
            <returns>A new <see cref="T:Neuroglia.Enumeration"/> parsed from the specified value</returns>
        </member>
        <member name="M:Neuroglia.Enumeration.FromName``1(System.String)">
            <summary>
            Parses the specified name into an <see cref="T:Neuroglia.Enumeration"/> class
            </summary>
            <typeparam name="T">The type of <see cref="T:Neuroglia.Enumeration"/> to parse the name into</typeparam>
            <param name="name">The value to parse</param>
            <returns>A new <see cref="T:Neuroglia.Enumeration"/> parsed from the specified name</returns>
        </member>
        <member name="M:Neuroglia.Enumeration.op_Implicit(Neuroglia.Enumeration)~System.String">
            <summary>
            Converts the specified <see cref="T:Neuroglia.Enumeration"/> into a string
            </summary>
            <param name="value">The <see cref="T:Neuroglia.Enumeration"/> class to convert to its string representation</param>
        </member>
        <member name="M:Neuroglia.Enumeration.op_Implicit(Neuroglia.Enumeration)~System.Int32">
            <summary>
            Converts the specified <see cref="T:Neuroglia.Enumeration"/> into an integer
            </summary>
            <param name="value">The <see cref="T:Neuroglia.Enumeration"/> class to convert to its integer representation</param>
        </member>
        <member name="T:Neuroglia.Error">
            <summary>
            Represents an error
            </summary>
        </member>
        <member name="M:Neuroglia.Error.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Error"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Error.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Error"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.Error"/>'s code</param>
            <param name="message">The <see cref="T:Neuroglia.Error"/>'s message</param>
        </member>
        <member name="M:Neuroglia.Error.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Error"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.Error"/>'s code</param>
        </member>
        <member name="P:Neuroglia.Error.Code">
            <summary>
            Gets the <see cref="T:Neuroglia.Error"/>'s code
            </summary>
        </member>
        <member name="P:Neuroglia.Error.Message">
            <summary>
            Gets the <see cref="T:Neuroglia.Error"/>'s message
            </summary>
        </member>
        <member name="M:Neuroglia.Error.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.AsyncObservableExtensions">
            <summary>
            Defines extensions for <see cref="T:System.IObservable`1"/>
            </summary>
            <remarks>Original source: <see href="https://github.com/dotnet/reactive/issues/459#issuecomment-357735068">davidnemeti post</see></remarks>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsync``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/>
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="onErrorAsync">Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompletedAsync">Action to invoke upon graceful termination of the observable sequence.</param>
            <returns><see cref="T:System.IDisposable"/> object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsync``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/>
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsync``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/>
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="onErrorAsync">Action to invoke upon exceptional termination of the observable sequence.</param>
            <param name="onCompletedAsync">Action to invoke upon graceful termination of the observable sequence.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsyncConcurrent``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/> concurrently
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <returns><see cref="T:System.IDisposable"/> object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsyncConcurrent``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/> concurrently
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsyncConcurrent``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/> concurrently
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="maxConcurrent">The maximum amount of concurrent threads.</param>
            <returns><see cref="T:System.IDisposable"/> object used to unsubscribe from the observable sequence.</returns>
        </member>
        <member name="M:Neuroglia.AsyncObservableExtensions.SubscribeAsyncConcurrent``1(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified <see cref="T:System.IObservable`1"/> concurrently
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="onNextAsync">Action to invoke for each element in the observable sequence.</param>
            <param name="maxConcurrent">The maximum amount of concurrent threads.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="T:Neuroglia.DurationExtensions">
            <summary>
            Defines extensions for <see cref="T:Iso8601DurationHelper.Duration"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.DurationExtensions.ToTimeSpan(Iso8601DurationHelper.Duration)">
            <summary>
            Converts the <see cref="T:Iso8601DurationHelper.Duration"/> into a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="duration">The <see cref="T:Iso8601DurationHelper.Duration"/> to convert</param>
            <returns>The converted <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="T:Neuroglia.IDictionaryExtensions">
            <summary>
            Exposes extensions for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:Neuroglia.IDictionaryExtensions.ToExpandoObject``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IDictionary`2"/> into a new <see cref="T:System.Dynamic.ExpandoObject"/>
            </summary>
            <param name="dictionary">The extended <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns>A new <see cref="T:System.Dynamic.ExpandoObject"/></returns>
        </member>
        <member name="T:Neuroglia.MemberInfoExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Reflection.MemberInfo"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.MemberInfoExtensions.TryGetCustomAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Attempts to get a custom attribute of the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute to get</typeparam>
            <param name="extended">The extended <see cref="T:System.Reflection.MemberInfo"/></param>
            <param name="attribute">The resulting custom attribute</param>
            <returns>A boolean indicating whether or not the custom attribute of the specified <see cref="T:System.Reflection.MemberInfo"/> could be found</returns>
        </member>
        <member name="M:Neuroglia.MemberInfoExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>'s XML documentation
            </summary>
            <param name="extended">The extended <see cref="T:System.Reflection.MemberInfo"/></param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/>'s XML documentation</returns>
        </member>
        <member name="M:Neuroglia.MemberInfoExtensions.GetDocumentationSummary(System.Reflection.MemberInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>'s XML documentation summary
            </summary>
            <param name="extended">The extended <see cref="T:System.Reflection.MemberInfo"/></param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/>'s XML documentation summary</returns>
        </member>
        <member name="M:Neuroglia.MemberInfoExtensions.GetOverridenMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> overriden by the <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <param name="extended">The <see cref="T:System.Reflection.MemberInfo"/> to get the overriden <see cref="T:System.Reflection.MemberInfo"/> for</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> overriden by the <see cref="T:System.Reflection.MemberInfo"/>, if any</returns>
        </member>
        <member name="T:Neuroglia.MethodInfoExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Reflection.MethodInfo"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.MethodInfoExtensions.InvokeAsync(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes the <see cref="T:System.Reflection.MethodInfo"/> asynchronously
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> to invoke</param>
            <param name="obj">The object on which to invoke the <see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="parameters">An array containing the <see cref="T:System.Reflection.MethodInfo"/>'s parameters</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Neuroglia.ObjectExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Object"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
            Transforms the object into an <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <param name="source">The object to transform</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the specified object's property name/value pairs</returns>
        </member>
        <member name="M:Neuroglia.ObjectExtensions.ToDictionary``1(System.Object)">
            <summary>
            Transforms the object into an <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <typeparam name="T">The type of values wrapped by the <see cref="T:System.Collections.Generic.IDictionary`2"/> to create</typeparam>
            <param name="source">The object to transform</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the specified object's property name/value pairs</returns>
        </member>
        <member name="M:Neuroglia.ObjectExtensions.Merge(System.Object,System.Object)">
            <summary>
            Merges the object with the specified destination object
            </summary>
            <param name="left">The object to merge</param>
            <param name="right">The object to merge the source with</param>
            <returns>A new <see cref="T:System.Dynamic.ExpandoObject"/></returns>
        </member>
        <member name="M:Neuroglia.ObjectExtensions.ToExpandoObject(System.Object)">
            <summary>
            Converts the object to a new <see cref="T:System.Dynamic.ExpandoObject"/>
            </summary>
            <param name="obj">The object to convert</param>
            <returns>A new <see cref="T:System.Dynamic.ExpandoObject"/></returns>
        </member>
        <member name="T:Neuroglia.ParameterInfoExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Reflection.MemberInfo"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.ParameterInfoExtensions.TryGetCustomAttribute``1(System.Reflection.ParameterInfo,``0@)">
            <summary>
            Attempts to get a custom attribute of the specified <see cref="T:System.Reflection.ParameterInfo"/>
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute to get</typeparam>
            <param name="extended">The extended <see cref="T:System.Reflection.ParameterInfo"/></param>
            <param name="attribute">The resulting custom attribute</param>
            <returns>A boolean indicating whether or not the custom attribute of the specified <see cref="T:System.Reflection.ParameterInfo"/> could be found</returns>
        </member>
        <member name="M:Neuroglia.ParameterInfoExtensions.GetDocumentation(System.Reflection.ParameterInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/>'s XML documentation
            </summary>
            <param name="extended">The extended <see cref="T:System.Reflection.ParameterInfo"/></param>
            <returns>The <see cref="T:System.Reflection.ParameterInfo"/>'s XML documentation</returns>
        </member>
        <member name="M:Neuroglia.ParameterInfoExtensions.GetDocumentationSummary(System.Reflection.ParameterInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/>'s XML documentation summary
            </summary>
            <param name="extended">The extended <see cref="T:System.Reflection.ParameterInfo"/></param>
            <returns>The <see cref="T:System.Reflection.ParameterInfo"/>'s XML documentation summary</returns>
        </member>
        <member name="T:Neuroglia.StringExtensions">
            <summary>
            Defines extensions for <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.StringExtensions.GenerateRandomAlphabeticString(System.Int32,Neuroglia.StringCase)">
            <summary>
            Generates a random alphabetic string of the specified length
            </summary>
            <param name="length">The length of the string to generate</param>
            <param name="stringCase">The case of the resulting string</param>
            <returns>A new random string of the specified length</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.GenerateRandomAlphanumericString(System.Int32,Neuroglia.StringCase)">
            <summary>
            Generates a random alphanumeric string of the specified length
            </summary>
            <param name="length">The length of the string to generate</param>
            <param name="stringCase">The case of the resulting string</param>
            <returns>A new random string of the specified length</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.GenerateRandomNumericString(System.Int32)">
            <summary>
            Generates a random numeric string of the specified length
            </summary>
            <param name="length">The length of the string to generate</param>
            <returns>A new random string of the specified length</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsAlphabetic(System.String)">
            <summary>
            Checks that the string is alphabetic
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is alphabetic</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsNumeric(System.String)">
            <summary>
            Checks that the string is numeric
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is numeric</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsAlphanumeric(System.String)">
            <summary>
            Checks that the string is alphanumeric
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is alphanumeric</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsNumericalValue(System.String)">
            <summary>
            Checks that the string represents a numerical value
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string represents a numerical value</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidEmail(System.String)">
            <summary>
            Determines whether or not the string is a valid email address
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is a valid email address</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidCountryCode(System.String)">
            <summary>
            Determines whether or not the string is a valid two-letter ISO 3166 country code
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is a valid two-letter ISO 3166 country code</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidLanguageCode(System.String)">
            <summary>
            Determines whether or not the string is a valid two-letter ISO 6391 language code
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is a valid two-letter ISO 6391 language code</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidCurrencyCode(System.String)">
            <summary>
            Determines whether or not the string is a valid three-letter ISO 4217 currency code
            </summary>
            <param name="text">The text to check</param>
            <returns>A boolean indicating whether or not the string is a valid three-letter ISO 4217 currency code</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidTimeZoneId(System.String)">
            <summary>
            Determines whether or not the string is a valid time zone id
            </summary>
            <param name="text">The text to check</param>
            <returns>A boolean indicating whether or not the string is a valid time zone id</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsValidUri(System.String)">
            <summary>
            Determines whether or not the string is a valid uri
            </summary>
            <param name="text">The string to check</param>
            <returns>A boolean indicating whether or not the string is a valid uri</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.SplitCamelCase(System.String,System.Boolean,System.Boolean)">
            <summary>
            Replaces the upper case characters by their lowercase counterpart and prepend them with a whitespace character
            </summary>
            <param name="text">The string to split</param>
            <param name="toLowerCase">A boolean indicating whether or not to lowercase the first character of each resulting word</param>
            <param name="keepFirstLetterInUpercase">A boolean indicating whether or not to keep the first letter in upper case</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics from the string
            </summary>
            <param name="text">The string to remove diacritics from</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.Slugify(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Slugifies the string by replacing whitespace by the specified delimiter character, removing diacritics, making it lowercase and restricting it to the specified max length, if any
            </summary>
            <param name="text">The string to slugify</param>
            <param name="delimiter">The delimiter character. Defaults to '_'</param>
            <param name="splitCamelCase">A boolean indicating whether or not to split camel cases</param>
            <param name="maxLength">The resulting string's maximum length</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            Formats the string
            </summary>
            <param name="text">The string to format</param>
            <param name="args">The arguments to format the string with</param>
            <remarks>Accepts named arguments, which will be replaced in sequence by the specified values</remarks>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified text to a camel-cased string
            </summary>
            <param name="text">The text to convert</param>
            <returns>The camel-cased text</returns>
        </member>
        <member name="M:Neuroglia.StringExtensions.IsJson(System.String)">
            <summary>
            Determines whether or not the specified text is JSON format
            </summary>
            <param name="text">The text to check</param>
            <returns>A boolean indicating whether or not the specified text is JSON format</returns>
        </member>
        <member name="T:Neuroglia.TypeExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Type"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetEnumerableElementType(System.Type)">
            <summary>
            Gets the type's <see cref="T:System.Collections.Generic.IEnumerable`1"/> element type
            </summary>
            <param name="extended">The extended type</param>
            <returns>The element type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetEnumerableType(System.Type)">
            <summary>
            Gets the generic type that derives from the <see cref="T:System.Collections.IEnumerable"/> type
            </summary>
            <param name="extended">The extended type</param>
            <returns>The generic type that derives from the <see cref="T:System.Collections.IEnumerable"/> type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.IsPrimitiveType(System.Type)">
            <summary>
            Gets a boolean indicating whether or not the type is a primitive type (includes value types, <see cref="T:System.Guid"/>, <see cref="T:System.String"/>, <see cref="T:System.DateTime"/> and array types)
            </summary>
            <param name="extended">The type to check</param>
            <returns>A boolean indicating whether or not the type is a primitive type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Gets a boolean indicating whether or not the type is an <see cref="T:System.Collections.IEnumerable"/> type
            </summary>
            <param name="extended">The extended type</param>
            <returns>A boolean indicating whether or not the type is an <see cref="T:System.Collections.IEnumerable"/> type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Gets a boolean indicating whether or not the type is a nullable type
            </summary>
            <param name="extended">The extended type</param>
            <returns>A boolean indicating whether or not the type is a nullable type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Determines whether or not the type is an anonymous type
            </summary>
            <param name="type">The extended type</param>
            <returns>A boolean indicating whether or not the type is an anonymous type</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetNullableType(System.Type)">
            <summary>
            Gets the nullable type the type inherits from, if any
            </summary>
            <param name="extended">The extended type</param>
            <returns>The nullable type the type inherits from, if any</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the type's default value
            </summary>
            <param name="extended">The extended type</param>
            <returns>The type's default value</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetGenericType(System.Type,System.Type)">
            <summary>
            Gets the type's generic type of the specified generic type definition
            </summary>
            <param name="extended">The extended type</param>
            <param name="genericTypeDefinition">The generic type definition to get the generic type of</param>
            <returns>The type's generic type of the specified generic type definition</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetGenericTypes(System.Type,System.Type)">
            <summary>
            Gets the type's generic types of the specified generic type definition
            </summary>
            <param name="extended">The extended type</param>
            <param name="genericTypeDefinition">The generic type definition to get the generic types of</param>
            <returns>A new <see cref="T:System.Collections.IEnumerable"/> containing the type's generic types of the specified generic type definition</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.IsGenericImplementationOf(System.Type,System.Type)">
            <summary>
            Gets a boolean indicating whether or not the type is a generic implementation of the specified generic type definition
            </summary>
            <param name="extended">The extended type</param>
            <param name="genericTypeDefinition">The generic type definition to check</param>
            <returns>A boolean indicating whether or not the type is a generic implementation of the specified generic type definition</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.TryGetCustomAttribute``1(System.Type,``0@)">
            <summary>
            Attempts to get a custom attribute of the specified type
            </summary>
            <typeparam name="TAttribute">The type of the custom attribute to get</typeparam>
            <param name="extended">The extended type</param>
            <param name="attribute">The resulting custom attribute</param>
            <returns>A boolean indicating whether or not the custom attribute of the specified type could be found</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetDocumentation(System.Type)">
            <summary>
            Gets the <see cref="T:System.Type"/>'s XML documentation
            </summary>
            <param name="extended">The extended <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:System.Type"/>'s XML documentation</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetDocumentationSummary(System.Type)">
            <summary>
            Gets the <see cref="T:System.Type"/>'s XML documentation summary
            </summary>
            <param name="extended">The extended <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:System.Type"/>'s XML documentation summary</returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.DeclaresMember(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Determines whether or not the type declares the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <param name="extended">The extended type</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to check</param>
            <returns>A boolean indicating whether or not the type declares the specified <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="M:Neuroglia.TypeExtensions.GetDeclaringTypeOf(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the declaring type of the specified <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <param name="extended">The extended <see cref="T:System.Type"/></param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to get the declaring type of</param>
            <returns>The declaring type of the specified <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="T:Neuroglia.IAsyncDuplexStreamingConnection`2">
            <summary>
            Defines the fundamentals of an object used to describe and manage an async duplex streaming connection
            </summary>
            <typeparam name="TOutbound">The type of outbound messages, meaning messages sent to the server</typeparam>
            <typeparam name="TInbound">The type of inbound messages, meaning messages received from the server</typeparam>
        </member>
        <member name="P:Neuroglia.IAsyncDuplexStreamingConnection`2.OutboundStream">
            <summary>
            Gets the service used to write messages to the outbound stream
            </summary>
        </member>
        <member name="P:Neuroglia.IAsyncDuplexStreamingConnection`2.InboundStream">
            <summary>
            Gets the service used to read messages from the inbound stream
            </summary>
        </member>
        <member name="T:Neuroglia.IAsyncStreamReader`1">
            <summary>
            Defines the fundamentals of a service used to read an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            </summary>
            <typeparam name="T">The type of data to read</typeparam>
        </member>
        <member name="P:Neuroglia.IAsyncStreamReader`1.Current">
            <summary>
            Gets the current message
            </summary>
        </member>
        <member name="M:Neuroglia.IAsyncStreamReader`1.MoveNextAsync">
            <summary>
            Attempts to read the next message on the stream
            </summary>
            <returns>A new boolean indicating whether or not a message could be read from the stream. If false, the reader has reached the end of the stream.</returns>
        </member>
        <member name="T:Neuroglia.IAsyncStreamWriter`1">
            <summary>
            Defines the fundamentals of a service used to read data from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            </summary>
            <typeparam name="T">The type of data to write</typeparam>
        </member>
        <member name="M:Neuroglia.IAsyncStreamWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Writes a messages
            </summary>
            <param name="data">The data to write</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Neuroglia.IDataTransferObject">
            <summary>
            Defines the fundamentals of all Data Transfer Objects (DTOs)
            </summary>
        </member>
        <member name="T:Neuroglia.IEnumeration">
            <summary>
            Defines the fundamentals of an enumeration object
            </summary>
        </member>
        <member name="T:Neuroglia.IIdentifiable">
            <summary>
            Defines the fundamentals of an object that is uniquely identifiable
            </summary>
        </member>
        <member name="P:Neuroglia.IIdentifiable.Id">
            <summary>
            Gets the object's unique identifier
            </summary>
        </member>
        <member name="T:Neuroglia.IIdentifiable`1">
            <summary>
            Defines the fundamentals of an object that is uniquely identifiable
            </summary>
            <typeparam name="TKey">The type of key used to uniquely identify the object</typeparam>
        </member>
        <member name="P:Neuroglia.IIdentifiable`1.Id">
            <summary>
            Gets the object's unique identifier
            </summary>
        </member>
        <member name="T:Neuroglia.IIntegrationEvent">
            <summary>
            Defines the fundamentals of an integration event, which is an event used to exchange information across domain boundaries
            </summary>
        </member>
        <member name="T:Neuroglia.IMetadata">
            <summary>
            Defines the fundamentals of an object used to hold metadata
            </summary>
        </member>
        <member name="T:Neuroglia.IntegrationEvent">
            <summary>
            Represents the default implementation of an <see cref="T:Neuroglia.IIntegrationEvent"/>
            </summary>
        </member>
        <member name="P:Neuroglia.IntegrationEvent.AggregateId">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.IntegrationEvent.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.IOperationResult">
            <summary>
            Defines the fundamentals of an object used to describe the result of an operation
            </summary>
        </member>
        <member name="P:Neuroglia.IOperationResult.Code">
            <summary>
            Gets the <see cref="T:Neuroglia.IOperationResult"/>'s code
            </summary>
        </member>
        <member name="P:Neuroglia.IOperationResult.Errors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Neuroglia.Error"/>s that have occured during the operation's execution
            </summary>
        </member>
        <member name="P:Neuroglia.IOperationResult.Succeeded">
            <summary>
            Gets a boolean indicating whether or not the operation has been successfully executed
            </summary>
        </member>
        <member name="P:Neuroglia.IOperationResult.Returned">
            <summary>
            Gets a boolean indicating whether or not the operation has returned data
            </summary>
        </member>
        <member name="P:Neuroglia.IOperationResult.Data">
            <summary>
            Gets the data returned by the operation
            </summary>
        </member>
        <member name="M:Neuroglia.IOperationResult.AddError(System.String,System.String)">
            <summary>
            Adds an error to the <see cref="T:Neuroglia.IOperationResult"/>
            </summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <returns>A new <see cref="T:Neuroglia.IOperationResult"/></returns>
        </member>
        <member name="T:Neuroglia.IOperationResult`1">
            <summary>
            Defines the fundamentals of an object used to describe the result of an operation
            </summary>
            <typeparam name="T">The type of data returned by the operation</typeparam>
        </member>
        <member name="P:Neuroglia.IOperationResult`1.Data">
            <summary>
            Gets the data returned by the operation
            </summary>
        </member>
        <member name="M:Neuroglia.IOperationResult`1.AddError(System.String,System.String)">
            <summary>
            Adds an error to the <see cref="T:Neuroglia.IOperationResult"/>
            </summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <returns>A new <see cref="T:Neuroglia.IOperationResult"/></returns>
        </member>
        <member name="T:Neuroglia.IRequest">
            <summary>
            Defines the fundamentals of an operational request
            </summary>
        </member>
        <member name="T:Neuroglia.IRequest`1">
            <summary>
            Defines the fundamentals of an operational request
            </summary>
            <typeparam name="TResult">The expected <see cref="T:Neuroglia.IOperationResult"/> type</typeparam>
        </member>
        <member name="T:Neuroglia.IRequest`2">
            <summary>
            Defines the fundamentals of an operational request
            </summary>
            <typeparam name="TResult">The expected <see cref="T:Neuroglia.IOperationResult"/> type</typeparam>
            <typeparam name="T">The type of data returned by the operation</typeparam>
        </member>
        <member name="T:Neuroglia.Iso8601TimeSpan">
            <summary>
            Represents an helper class for handling ISO 8601 timespans
            </summary>
        </member>
        <member name="M:Neuroglia.Iso8601TimeSpan.Parse(System.String)">
            <summary>
            Parses the specified input
            </summary>
            <param name="input">The input string to parse</param>
            <returns>The parsed <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="M:Neuroglia.Iso8601TimeSpan.Format(System.TimeSpan)">
            <summary>
            Formats the specified <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> to format</param>
            <returns>The parsed <see cref="T:System.TimeSpan"/></returns>
        </member>
        <member name="T:Neuroglia.ITransaction">
            <summary>
            Defines the fundamentals of a transaction
            </summary>
        </member>
        <member name="M:Neuroglia.ITransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the changes made in the transaction's scope
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.ITransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rollbacks the changes made in the transaction's scope
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Neuroglia.IValueObject">
            <summary>
            Defines the fundamentals of a value object
            </summary>
        </member>
        <member name="T:Neuroglia.Metadata">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IMetadata"/> interface
            </summary>
        </member>
        <member name="T:Neuroglia.OperationResult">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IOperationResult"/> interface
            </summary>
        </member>
        <member name="M:Neuroglia.OperationResult.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
        </member>
        <member name="M:Neuroglia.OperationResult.#ctor(System.String,Neuroglia.Error[])">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.OperationResult"/>'s code</param>
            <param name="errors">An array of <see cref="T:Neuroglia.Error"/>s that have occured during the operation's execution</param>
        </member>
        <member name="M:Neuroglia.OperationResult.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.OperationResult"/>'s code</param>
        </member>
        <member name="P:Neuroglia.OperationResult.Code">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.OperationResult.Errors">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.OperationResult.Returned">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.OperationResult.Data">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.OperationResult.Succeeded">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.OperationResult.AddError(System.String,System.String)">
            <summary>
            Adds an error to the <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <returns>The <see cref="T:Neuroglia.OperationResult"/></returns>
        </member>
        <member name="M:Neuroglia.OperationResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.OperationResult`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.IOperationResult"/> interface
            </summary>
            <typeparam name="T">The type of data returned by the operation</typeparam>
        </member>
        <member name="M:Neuroglia.OperationResult`1.#ctor(System.String,Neuroglia.Error[])">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.OperationResult"/>'s code</param>
            <param name="errors">An array of <see cref="T:Neuroglia.Error"/>s that have occured during the operation's execution</param>
        </member>
        <member name="M:Neuroglia.OperationResult`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="code">The <see cref="T:Neuroglia.OperationResult"/>'s code</param>
            <param name="data">The data returned by the operation</param>
        </member>
        <member name="M:Neuroglia.OperationResult`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResult"/>
            </summary>
            <param name="data">The data returned by the operation</param>
        </member>
        <member name="P:Neuroglia.OperationResult`1.Data">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.OperationResult`1.AddError(System.String,System.String)">
            <summary>
            Adds an error to the <see cref="T:Neuroglia.OperationResult`1"/>
            </summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <returns>The <see cref="T:Neuroglia.OperationResult`1"/></returns>
        </member>
        <member name="T:Neuroglia.OperationResultCode">
            <summary>
            Enumerates all types of response codes
            </summary>
        </member>
        <member name="M:Neuroglia.OperationResultCode.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResultCode"/>
            </summary>
        </member>
        <member name="M:Neuroglia.OperationResultCode.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OperationResultCode"/>
            </summary>
            <param name="value">The <see cref="T:Neuroglia.OperationResultCode"/>'s value</param>
            <param name="name">The <see cref="T:Neuroglia.OperationResultCode"/>'s name</param>
        </member>
        <member name="F:Neuroglia.OperationResultCode.Ok">
            <summary>
            Indicates a succesfull result
            </summary>
        </member>
        <member name="F:Neuroglia.OperationResultCode.Invalid">
            <summary>
            Indicates an invalid request
            </summary>
        </member>
        <member name="F:Neuroglia.OperationResultCode.NotFound">
            <summary>
            Indicates that an object could not be found
            </summary>
        </member>
        <member name="F:Neuroglia.OperationResultCode.NotModified">
            <summary>
            Indicates that an object was unexpectedly not modified
            </summary>
        </member>
        <member name="F:Neuroglia.OperationResultCode.Forbidden">
            <summary>
            Indicates that an object was unexpectedly not modified
            </summary>
        </member>
        <member name="F:Neuroglia.OperationResultCode.InternalError">
            <summary>
            Indicates an internal error
            </summary>
        </member>
        <member name="T:Neuroglia.OptimisticConcurrencyException">
            <summary>
            Represents the <see cref="T:System.Exception"/> thrown when an optimistic concurrency error occurs
            </summary>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
            <param name="actualVersion">The expected version</param>
            <param name="expectedVersion">The actual version</param>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="actualVersion">The expected version</param>
            <param name="expectedVersion">The actual version</param>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Neuroglia.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Int64,System.Int64)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.OptimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
            <param name="actualVersion">The expected version</param>
            <param name="expectedVersion">The actual version</param>
        </member>
        <member name="P:Neuroglia.OptimisticConcurrencyException.ExpectedVersion">
            <summary>
            Gets the expected version
            </summary>
        </member>
        <member name="P:Neuroglia.OptimisticConcurrencyException.ActualVersion">
            <summary>
            Gets the actual version
            </summary>
        </member>
        <member name="T:Neuroglia.PessimisticConcurrencyException">
            <summary>
            Represents the <see cref="T:System.Exception"/> thrown when a pessimistic concurrency error occurs
            </summary>
        </member>
        <member name="M:Neuroglia.PessimisticConcurrencyException.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.PessimisticConcurrencyException"/>
            </summary>
        </member>
        <member name="M:Neuroglia.PessimisticConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.PessimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Neuroglia.PessimisticConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.PessimisticConcurrencyException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Neuroglia.PropertyPath">
            <summary>
            Represents a parsed property path, which typically is a chain of property names separated with a dot
            </summary>
        </member>
        <member name="M:Neuroglia.PropertyPath.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.PropertyPath"/>
            </summary>
            <param name="path">The string that contains the raw property path</param>
        </member>
        <member name="P:Neuroglia.PropertyPath.OriginalPath">
            <summary>
            Gets a string that represents the <see cref="T:Neuroglia.PropertyPath"/>'s original path
            </summary>
        </member>
        <member name="P:Neuroglia.PropertyPath.Values">
            <summary>
            Gets a list of the values the <see cref="T:Neuroglia.PropertyPath"/> is made of
            </summary>
        </member>
        <member name="M:Neuroglia.PropertyPath.ToExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Linq.Expressions.MemberExpression"/> that expresses the member-access to the specified property
            </summary>
            <param name="target">The <see cref="T:System.Linq.Expressions.Expression"/> that represents the instance on which to attempt the member-access</param>
            <returns>A <see cref="T:System.Linq.Expressions.MemberExpression"/> that expresses the member-access to the specified property</returns>
        </member>
        <member name="M:Neuroglia.PropertyPath.Parse(System.String)">
            <summary>
            Parse the specified input into a new <see cref="T:Neuroglia.PropertyPath"/>
            </summary>
            <param name="input">The input to parse</param>
            <returns>A new <see cref="T:Neuroglia.PropertyPath"/> based on the specified input</returns>
        </member>
        <member name="M:Neuroglia.PropertyPath.TryParse(System.String,Neuroglia.PropertyPath@)">
            <summary>
            Attempts to parse the specified input into a new <see cref="T:Neuroglia.PropertyPath"/>
            </summary>
            <param name="input">The input to parse</param>
            <param name="propertyPath">The resulting <see cref="T:Neuroglia.PropertyPath"/>, if any</param>
            <returns>A boolean indicating whether or not a <see cref="T:Neuroglia.PropertyPath"/> could be parse from the specified input</returns>
        </member>
        <member name="M:Neuroglia.PropertyPath.IsValidPropertyPath(System.String)">
            <summary>
            Gets a boolean indicating whether or not the specified input is a valid <see cref="T:Neuroglia.PropertyPath"/>
            </summary>
            <param name="propertyPath">The property path to evaluate</param>
            <returns>A boolean indicating whether or not the specified input is a valid <see cref="T:Neuroglia.PropertyPath"/></returns>
        </member>
        <member name="T:Neuroglia.StringCase">
            <summary>
            Enumerates all string cases
            </summary>
        </member>
        <member name="F:Neuroglia.StringCase.Lower">
            <summary>
            Indicates lowercase
            </summary>
        </member>
        <member name="F:Neuroglia.StringCase.Upper">
            <summary>
            Indicates uppercase
            </summary>
        </member>
        <member name="T:Neuroglia.UnixTimeStamp">
            <summary>
            Defines helpers for UNIX time stamps
            </summary>
        </member>
        <member name="M:Neuroglia.UnixTimeStamp.ToDateTime(System.Int64)">
            <summary>
            Converts a UNIX time stamp to a <see cref="T:System.DateTime"/>
            </summary>
            <param name="unixTimestamp">The UNIX time stamp to convert</param>
            <returns>The resulting <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Neuroglia.UnixTimeStamp.ToDateTimeOffset(System.Int64)">
            <summary>
            Converts a UNIX time stamp to a <see cref="T:System.DateTimeOffset"/>
            </summary>
            <param name="unixTimestamp">The UNIX time stamp to convert</param>
            <returns>The resulting <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Neuroglia.UnixTimeStamp.Parse(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a UNIX time stamp
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to convert</param>
            <returns>The resulting UNIX time stamp</returns>
        </member>
        <member name="M:Neuroglia.UnixTimeStamp.Parse(System.DateTimeOffset)">
            <summary>
            Converts a <see cref="T:System.DateTimeOffset"/> to a UNIX time stamp
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTimeOffset"/> to convert</param>
            <returns>The resulting UNIX time stamp</returns>
        </member>
        <member name="T:Neuroglia.AssemblyLocator">
            <summary>
            Acts as a helper class for locating <see cref="T:System.Reflection.Assembly"/> instances
            </summary>
        </member>
        <member name="M:Neuroglia.AssemblyLocator.GetAssemblies">
            <summary>
            Get all loaded assemlies
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all loaded assemblies</returns>
        </member>
        <member name="T:Neuroglia.EnumHelper">
            <summary>
            Defines helper methods to handle <see cref="T:System.Enum"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.EnumHelper.Parse(System.String,System.Type)">
            <summary>
            Parses the specified input into the desired <see cref="T:System.Enum"/>
            </summary>
            <param name="value">The value to parse</param>
            <param name="enumType">The type of the enum to parse</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.Parse``1(System.String)">
            <summary>
            Parses the specified input into the desired enum
            </summary>
            <typeparam name="TEnum">The type of the enum to parse</typeparam>
            <param name="value">The value to parse</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.Stringify(System.Enum,System.Type)">
            <summary>
            Gets the string representation for the specified enum value
            </summary>
            <param name="value">The value to stringify</param>
            <param name="enumType">The type of the enum to stringify</param>
            <returns>The string representation for the specified enum value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.Stringify``1(``0)">
            <summary>
            Gets the string representation for the specified enum value
            </summary>
            <param name="value">The value to stringify</param>
            <typeparam name="TEnum">The type of the enum to stringify</typeparam>
            <returns>The string representation for the specified enum value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.GetFlags(System.Enum,System.Type)">
            <summary>
            Gets all the enum values contained by the specified flags value
            </summary>
            <param name="flags">The flags to get the values of</param>
            <param name="enumType">The type of the enumeration to get the flags of</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the enum values contained by the specifed flags value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.GetFlags``1(``0)">
            <summary>
            Gets all the enum values contained by the specified flags value
            </summary>
            <typeparam name="TEnum">The type of the enumeration to get the flags of</typeparam>
            <param name="flags">The flags to get the values of</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the enum values contained by the specifed flags value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.GetField``1(``0)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> that corresponds to the specified enum value
            </summary>
            <typeparam name="TEnum">The type of the enumeration to get a <see cref="T:System.Reflection.FieldInfo"/> of</typeparam>
            <param name="value">The enum value to get the <see cref="T:System.Reflection.FieldInfo"/> of</param>
            <returns>The <see cref="T:System.Reflection.FieldInfo"/> that corresponds to the specified enum value</returns>
        </member>
        <member name="M:Neuroglia.EnumHelper.GetDisplayName``1(``0)">
            <summary>
            Gets the display name of the specified enum value
            </summary>
            <typeparam name="TEnum">The type of the enumeration to get the display name for</typeparam>
            <param name="value">The value to get the display name for</param>
            <returns>The display name of the specified enum value</returns>
        </member>
        <member name="T:Neuroglia.Parser">
            <summary>
            Exposes helper methods to parse data into value types and other .NET types (TimeSpan, DateTime, ...)
            </summary>
        </member>
        <member name="M:Neuroglia.Parser.Parse(System.String,System.Type)">
            <summary>
            Parses a string into the specified type
            </summary>
            <param name="input">The input to parse</param>
            <param name="expectedType">The type to parse the input to</param>
            <returns>The parsed input</returns>
        </member>
        <member name="M:Neuroglia.Parser.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Attempts to parses a string into the specified type
            </summary>
            <param name="input">The input to parse</param>
            <param name="expectedType">The type to parse the input to</param>
            <param name="value">The parsed input</param>
            <returns>A boolean indicating whether or not the specified input could be parsed</returns>
        </member>
        <member name="M:Neuroglia.Parser.Parse``1(System.String)">
            <summary>
            Parses a string into the specified type
            </summary>
            <typeparam name="T">The type to parse the input to</typeparam>
            <param name="input">The input to parse</param>
            <returns>The parsed input</returns>
        </member>
        <member name="M:Neuroglia.Parser.TryParse``1(System.String,System.Object@)">
            <summary>
            Attempts to parses a string into the specified type
            </summary>
            <typeparam name="T">The type to parse the input to</typeparam>
            <param name="input">The input to parse</param>
            <param name="value">The parsed input</param>
            <returns>A boolean indicating whether or not the specified input could be parsed</returns>
        </member>
        <member name="T:Neuroglia.TypeCacheUtil">
            <summary>
            Acts as an helper to find a filter types
            </summary>
        </member>
        <member name="M:Neuroglia.TypeCacheUtil.FindFilteredTypes(System.String,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])">
            <summary>
            Find types filtered by a given predicate
            </summary>
            <param name="cacheKey">The cache key used to store the results</param>
            <param name="predicate">The predicate that filters the types</param>
            <param name="assemblies">An array containing the assemblies to scan</param>
            <returns>The filtered types</returns>
        </member>
        <member name="M:Neuroglia.TypeCacheUtil.FindFilteredTypes(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Find types filtered by a given predicate
            </summary>
            <param name="cacheKey">The cache key used to store the results</param>
            <param name="predicate">The predicate that filters the types</param>
            <returns>The filtered types</returns>
        </member>
        <member name="T:Neuroglia.TypeDiscriminator">
            <summary>
            Exposes helper methods to help discriminate types
            </summary>
        </member>
        <member name="M:Neuroglia.TypeDiscriminator.GetDiscriminatorProperty(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> used to get the discriminator value of the specified type
            </summary>
            <param name="type">The type to get the discriminator property of</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> used to get the discriminator value of the specified type</returns>
        </member>
        <member name="M:Neuroglia.TypeDiscriminator.GetDiscriminatorProperty``1">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> used to get the discriminator value of the specified type
            </summary>
            <typeparam name="T">The type to get the discriminator property of</typeparam>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> used to get the discriminator value of the specified type</returns>
        </member>
        <member name="M:Neuroglia.TypeDiscriminator.Discriminate(System.Type,System.String)">
            <summary>
            Discriminates the specified type
            </summary>
            <param name="type">The type to discriminate</param>
            <param name="discriminatorValue">The value used to discriminate the specified type</param>
            <returns>The discriminated type</returns>
        </member>
        <member name="M:Neuroglia.TypeDiscriminator.Discriminate``1(System.String)">
            <summary>
            Discriminates the specified type
            </summary>
            <typeparam name="T">The type to discriminate</typeparam>
            <param name="discriminatorValue">The value used to discriminate the specified type</param>
            <returns>The discriminated type</returns>
        </member>
        <member name="T:Neuroglia.XmlDocumentationHelper">
            <summary>
            Defines helper members to handle Xml code documentation
            </summary>
            <remarks>Code adapted from https://docs.microsoft.com/en-us/archive/msdn-magazine/2019/october/csharp-accessing-xml-documentation-via-reflection</remarks>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.DocumentationOf(System.Type)">
            <summary>
            Gets the specified type's XML code documentation
            </summary>
            <param name="type">The type to get the XML code documentation for</param>
            <returns>The XML code documentation of the specified type</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.DocumentationXElementOf(System.Type)">
            <summary>
            Gets the specified type's XML code documentation
            </summary>
            <param name="type">The type to get the XML code documentation for</param>
            <returns>The XML code documentation of the specified type</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.SummaryOf(System.Type)">
            <summary>
            Gets the specified type's XML code documentation summary
            </summary>
            <param name="type">The type to get the XML code documentation summary for</param>
            <returns>The XML code documentation summary of the specified type</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.DocumentationOf(System.Reflection.MemberInfo)">
            <summary>
            Gets the specified member's XML code documentation
            </summary>
            <param name="member">The member to get the XML code documentation for</param>
            <returns>The XML code documentation of the specified member</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.DocumentationXElementOf(System.Reflection.MemberInfo)">
            <summary>
            Gets the specified member's XML code documentation
            </summary>
            <param name="member">The member to get the XML code documentation for</param>
            <returns>The XML code documentation of the specified member</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.SummaryOf(System.Reflection.MemberInfo)">
            <summary>
            Gets the specified member's XML code documentation summary
            </summary>
            <param name="member">The member to get the XML code documentation summary for</param>
            <returns>The XML code documentation summary of the specified member</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.DocumentationOf(System.Reflection.ParameterInfo)">
            <summary>
            Gets the specified parameter's XML code documentation
            </summary>
            <param name="parameter">The parameter to get the XML code documentation for</param>
            <returns>The XML code documentation of the specified parameter</returns>
        </member>
        <member name="M:Neuroglia.XmlDocumentationHelper.SummaryOf(System.Reflection.ParameterInfo)">
            <summary>
            Gets the specified parameter's XML code documentation summary
            </summary>
            <param name="parameter">The parameter to get the XML code documentation summary for</param>
            <returns>The XML code documentation summary of the specified parameter</returns>
        </member>
        <member name="T:Neuroglia.ValueObject">
            <summary>
            Represents object made of out equatable atomic values
            </summary>
        </member>
        <member name="M:Neuroglia.ValueObject.GetAtomicValues">
            <summary>
            Retrieves the atomic values the <see cref="T:Neuroglia.ValueObject"/> is made out of
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containg the atomic values the <see cref="T:Neuroglia.ValueObject"/> is made out of</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.Equals(System.Object)">
            <summary>
            Determines whether or not the <see cref="T:Neuroglia.ValueObject"/> equals the specified value
            </summary>
            <param name="obj">The value to compare to the <see cref="T:Neuroglia.ValueObject"/></param>
            <returns>A boolean indicating whether or not the <see cref="T:Neuroglia.ValueObject"/> equals the specified value</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.GetHashCode">
            <summary>
            Serves as the default hash function
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.System#IEquatable{Neuroglia#IValueObject}#Equals(Neuroglia.IValueObject)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.ValueObject.EqualOperator(Neuroglia.ValueObject,Neuroglia.ValueObject)">
            <summary>
            Determines whether or not the specified <see cref="T:Neuroglia.ValueObject"/>s are equal
            </summary>
            <param name="left">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <param name="right">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:Neuroglia.ValueObject"/>s are equal</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.NotEqualOperator(Neuroglia.ValueObject,Neuroglia.ValueObject)">
            <summary>
            Determines whether or not the specified <see cref="T:Neuroglia.ValueObject"/>s are not equal
            </summary>
            <param name="left">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <param name="right">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <returns>A boolean indicating whether or not the specified <see cref="T:Neuroglia.ValueObject"/>s are not equal</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.op_Equality(Neuroglia.ValueObject,Neuroglia.ValueObject)">
            <summary>
            Determines whether or not the two specified values are equal
            </summary>
            <param name="left">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <param name="right">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <returns>A boolean indicating whether or not the two specified values are equal</returns>
        </member>
        <member name="M:Neuroglia.ValueObject.op_Inequality(Neuroglia.ValueObject,Neuroglia.ValueObject)">
            <summary>
            Determines whether or not the two specified values are equal
            </summary>
            <param name="left">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <param name="right">A <see cref="T:Neuroglia.ValueObject"/> to compare</param>
            <returns>A boolean indicating whether or not the two specified values are equal</returns>
        </member>
        <member name="T:System.Linq.ConcurrentFixedSizeQueue`1">
            <summary>
            Represents a queue of a fixed size. Adding elements after the queue's capacity has been reached triggers dequeuing
            </summary>
            <typeparam name="T">The type of element the <see cref="T:System.Linq.ConcurrentFixedSizeQueue`1"/> is made out of</typeparam>
            <remarks>Code taken from <see href="https://stackoverflow.com/a/49821753/3637555">Josh's answer</see></remarks>
        </member>
        <member name="M:System.Linq.ConcurrentFixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:System.Linq.ConcurrentFixedSizeQueue`1"/>
            </summary>
            <param name="capacity">The <see cref="T:System.Linq.ConcurrentFixedSizeQueue`1"/>'s capacity</param>
        </member>
        <member name="P:System.Linq.ConcurrentFixedSizeQueue`1.Queue">
            <summary>
            Gets the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>
            </summary>
        </member>
        <member name="P:System.Linq.ConcurrentFixedSizeQueue`1.Capacity">
            <summary>
            Gets the <see cref="T:System.Linq.ConcurrentFixedSizeQueue`1"/>'s capacity
            </summary>
        </member>
        <member name="M:System.Linq.ConcurrentFixedSizeQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified element
            </summary>
            <param name="elem">The element to enqueue</param>
        </member>
        <member name="M:System.Linq.ConcurrentFixedSizeQueue`1.Dequeue">
            <summary>
            Dequeues the <see cref="T:System.Linq.ConcurrentFixedSizeQueue`1"/>
            </summary>
            <returns>The first element in queue</returns>
        </member>
        <member name="M:System.Linq.ConcurrentFixedSizeQueue`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:System.Linq.IQueryableExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Linq.IQueryable"/>s
            </summary>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.OrderBy(System.Linq.IQueryable,Neuroglia.PropertyPath)">
            <summary>
            Orders the <see cref="T:System.Linq.IQueryable"/> by the specified <see cref="T:Neuroglia.PropertyPath"/>
            </summary>
            <param name="queryable">The <see cref="T:System.Linq.IQueryable"/> to order</param>
            <param name="propertyPath">The <see cref="T:Neuroglia.PropertyPath"/> to order the <see cref="T:System.Linq.IQueryable"/> by</param>
            <returns>A new <see cref="T:System.Linq.IQueryable"/></returns>
        </member>
        <member name="M:System.Linq.IQueryableExtensions.OrderByDescending(System.Linq.IQueryable,Neuroglia.PropertyPath)">
            <summary>
            Orders the <see cref="T:System.Linq.IQueryable"/> by the specified <see cref="T:Neuroglia.PropertyPath"/>, in a descending fashion
            </summary>
            <param name="queryable">The <see cref="T:System.Linq.IQueryable"/> to order</param>
            <param name="propertyPath">The <see cref="T:Neuroglia.PropertyPath"/> to order the <see cref="T:System.Linq.IQueryable"/> by</param>
            <returns>A new <see cref="T:System.Linq.IQueryable"/></returns>
        </member>
        <member name="T:System.Linq.IAsyncQueryable`1">
            <summary>
            Defines the fundamentals of an async <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
            <typeparam name="T">The type of element to query</typeparam>
        </member>
        <member name="T:System.Linq.IAsyncQueryProvider">
            <summary>
            Defines the fundamentals of an async <see cref="T:System.Linq.IQueryProvider"/>
            </summary>
        </member>
        <member name="M:System.Linq.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Executes the query represented by a specified expression tree
            </summary>
            <typeparam name="TResult">The type of the value that results from executing the query</typeparam>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> tree that represents a LINQ query</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The value that results from executing the specified query</returns>
        </member>
        <member name="T:System.Collections.ICollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Collections.ICollection"/>s
            </summary>
        </member>
        <member name="M:System.Collections.ICollectionExtensions.Add(System.Collections.ICollection,System.Object)">
            <summary>
            Adds the specified value to the <see cref="T:System.Collections.ICollection"/>
            </summary>
            <param name="collection">The <see cref="T:System.Collections.ICollection"/> to add a value to</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:System.Collections.ICollectionExtensions.AddRange(System.Collections.ICollection,System.Collections.IEnumerable)">
            <summary>
            Adds the specified values to the <see cref="T:System.Collections.ICollection"/>
            </summary>
            <param name="collection">The <see cref="T:System.Collections.ICollection"/> to add values to</param>
            <param name="values">The values to add</param>
        </member>
        <member name="T:System.Collections.IEnumerableExtensions">
            <summary>
            Defines extensions for <see cref="T:System.Collections.IEnumerable"/>s
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Counts the amount of elements in the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> to count</param>
            <returns>The amount of elements in the <see cref="T:System.Collections.IEnumerable"/></returns>
        </member>
        <member name="M:System.Collections.IEnumerableExtensions.OfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Filters the elements of the <see cref="T:System.Collections.IEnumerable"/> by type
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> to filter</param>
            <param name="type">The type to filter the <see cref="T:System.Collections.IEnumerable"/> by</param>
            <returns>The filtered <see cref="T:System.Collections.IEnumerable"/></returns>
        </member>
        <member name="M:System.Collections.IEnumerableExtensions.ToArray(System.Collections.IEnumerable)">
            <summary>
            Converts the <see cref="T:System.Collections.IEnumerable"/> into a new array
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>A new array, made out of the <see cref="T:System.Collections.IEnumerable"/>'s values</returns>
        </member>
        <member name="M:System.Collections.IEnumerableExtensions.ToList(System.Collections.IEnumerable)">
            <summary>
            Converts the <see cref="T:System.Collections.IEnumerable"/> into a new <see cref="T:System.Collections.IList"/>
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>A new <see cref="T:System.Collections.IList"/>, made out of the <see cref="T:System.Collections.IEnumerable"/>'s values</returns>
        </member>
    </members>
</doc>
