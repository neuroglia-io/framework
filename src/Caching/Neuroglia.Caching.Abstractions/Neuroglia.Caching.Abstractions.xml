<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Caching.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.Caching.CacheEntry`1">
            <summary>
            Represents the default implementation of the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> interface
            </summary>
            <typeparam name="T">The type of the entry</typeparam>
        </member>
        <member name="M:Neuroglia.Caching.CacheEntry`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Caching.CacheEntry`1"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.CacheEntry`1.#ctor(System.String,`0,System.Byte[],System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Caching.CacheEntry`1"/>
            </summary>
            <param name="key">The entry's key</param>
            <param name="value">The entry's value</param>
            <param name="concurrencyToken">The entry's concurrency token</param>
            <param name="absoluteExpiration">The entry's absolute expiration</param>
            <param name="slidingExpiration">The entry's sliding expiration</param>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntry`1.Key">
            <summary>
            Gets the entry's key
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntry`1.Value">
            <summary>
            Gets the entry's value
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntry`1.ConcurrencyToken">
            <summary>
            Gets the entry's concurrency token
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntry`1.AbsoluteExpiration">
            <summary>
            Gets the entry's absolute expiration
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntry`1.SlidingExpiration">
            <summary>
            Gets the entry's sliding expiration
            </summary>
        </member>
        <member name="T:Neuroglia.Caching.CacheEntryOptions">
            <summary>
            Represents the options used to configure a cache entry
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntryOptions.AbsoluteExpiration">
            <summary>
            Gets/sets the date and time at which the cache entry expires
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntryOptions.RelativeExpiration">
            <summary>
            Gets/sets the time in which the cache entry expires
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheEntryOptions.SlidingExpiration">
            <summary>
            Gets/sets the cache entry's sliding expiration
            </summary>
        </member>
        <member name="T:Neuroglia.Caching.CacheLock">
            <summary>
            Represents a cache lock
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.CacheLock.#ctor(Neuroglia.Caching.IDistributedCache,System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Caching.CacheLock"/>
            </summary>
            <param name="distributedCache">The <see cref="T:Neuroglia.Caching.IDistributedCache"/> to create the lock for</param>
            <param name="key">The key to lock</param>
            <param name="token">The lock's token</param>
            <param name="expiresIn">The time in which the <see cref="T:Neuroglia.Caching.CacheLock"/> expires</param>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.DisitributedCache">
            <summary>
            Gets the <see cref="T:Neuroglia.Caching.IDistributedCache"/> to create the lock for
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.Key">
            <summary>
            Gets the locked key
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.Token">
            <summary>
            Gets the lock's token
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.AcquiredAt">
            <summary>
            Gets the date and time at which the token has been acquired
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.ExpiresIn">
            <summary>
            Gets the time in which the <see cref="T:Neuroglia.Caching.CacheLock"/> expires
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.CacheLock.HasExpired">
            <summary>
            Gets a boolean indicating whether or not the token has expired
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.CacheLock.Dispose">
            <summary>
            Disposes of the <see cref="T:Neuroglia.Caching.CacheLock"/>
            </summary>
        </member>
        <member name="T:Neuroglia.Caching.IDistributedCacheExtensions">
            <summary>
            Defines extensions for <see cref="T:Neuroglia.Caching.IDistributedCache"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCacheExtensions.GetOrCreateAsync1``1(Neuroglia.Caching.IDistributedCache,System.String,System.Func{Neuroglia.Caching.CacheEntryOptions,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Gets or creates a value of the specified type
            </summary>
            <typeparam name="T">The type of value to get or create</typeparam>
            <param name="cache">The extended <see cref="T:Neuroglia.Caching.IDistributedCache"/></param>
            <param name="key">The key of the value to get or create</param>
            <param name="factory">A <see cref="T:System.Func`2"/> used to congifure the <see cref="T:Neuroglia.Caching.CacheEntryOptions"/> to use and to generate a value of the specified type</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The value that has been retrieved or set</returns>
        </member>
        <member name="T:Neuroglia.Caching.ICacheEntry">
            <summary>
            Defines the fundamentals of a cache entry
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry.Key">
            <summary>
            Gets the entry's key
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry.Value">
            <summary>
            Gets the entry's key
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry.AbsoluteExpiration">
            <summary>
            Gets the entry's absolute expiration
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry.SlidingExpiration">
            <summary>
            Gets the entry's sliding expiration
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry.ConcurrencyToken">
            <summary>
            Gets the entry's concurrency token
            </summary>
        </member>
        <member name="T:Neuroglia.Caching.ICacheEntry`1">
            <summary>
            Defines the fundamentals of a generic cache entry
            </summary>
        </member>
        <member name="P:Neuroglia.Caching.ICacheEntry`1.Value">
            <summary>
            Gets the entry's key
            </summary>
        </member>
        <member name="T:Neuroglia.Caching.IDistributedCache">
            <summary>
            Defines the fundamentals of a distributed cache
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ContainsKey(System.String)">
            <summary>
            Gets a boolean indicating whether or not the cache contains the specified key
            </summary>
            <param name="key">The key to check</param>
            <returns>A boolean indicating whether or not the cache contains the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ContainsKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a boolean indicating whether or not the cache contains the specified key
            </summary>
            <param name="key">The key to check</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the cache contains the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ContainsListElement(System.String,System.String)">
            <summary>
            Determines whether the specified list contains an element with the specified key
            </summary>
            <param name="key">The key of the list to check</param>
            <param name="elemKey">The key of the element to check for existence</param>
            <returns>A boolean indicating whether or not the specified list contains an element with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ContainsListElementAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Determines whether the specified list contains an element with the specified key
            </summary>
            <param name="key">The key of the list to check</param>
            <param name="elemKey">The key of the element to check for existence</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the specified list contains an element with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.FindKeys(System.String)">
            <summary>
            Finds all keys that match the specified pattern
            </summary>
            <param name="pattern">The pattern to match</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the keys that match the specified pattern</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.FindKeysAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds all keys that match the specified pattern
            </summary>
            <param name="pattern">The pattern to match</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the keys that match the specified pattern</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetListKeys(System.String)">
            <summary>
            Retrieves all the element keys of the list with the specified key
            </summary>
            <param name="key">The key of the list for which to retrieve all the element keys</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the element keys of the list with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetListKeysAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the element keys of the list with the specified key
            </summary>
            <param name="key">The key of the list for which to retrieve all the element keys</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the element keys of the list with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Lock(System.String,System.String,System.TimeSpan)">
            <summary>
            Locks access to the specified key
            </summary>
            <param name="key">The key to lock</param>
            <param name="token">The lock's token</param>
            <param name="expiresIn">The time in which the lock expires</param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ReleaseLock(System.String,System.String)">
            <summary>
            Releases the lock on the specified key
            </summary>
            <param name="key">The key to release the lock of</param>
            <param name="token">The token of the lock to release</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetEntry``1(System.String)">
            <summary>
            Gets the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key
            </summary>
            <typeparam name="T">The type of data cached by the entry</typeparam>
            <param name="key">The key of the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> to retrieve</param>
            <returns>The <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetEntryAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key
            </summary>
            <typeparam name="T">The type of data cached by the entry</typeparam>
            <param name="key">The key of the <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The <see cref="T:Neuroglia.Caching.ICacheEntry`1"/> that matches the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Get``1(System.String)">
            <summary>
            Gets the value cached with the specified key
            </summary>
            <typeparam name="T">The type of the cached value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <returns>The value cached with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the value cached with the specified key
            </summary>
            <typeparam name="T">The type of the cached value</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The value cached with the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,Neuroglia.Caching.CacheEntryOptions)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="options">The options configuring how to cache the value</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,Neuroglia.Caching.CacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="options">The options configuring how to cache the value</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.Byte[],Neuroglia.Caching.CacheEntryOptions)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="options">The options configuring how to cache the value</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.Byte[],Neuroglia.Caching.CacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="options">The options configuring how to cache the value</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.DateTimeOffset)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.DateTimeOffset,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.DateTimeOffset,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresAt">The date and time at which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Set``1(System.String,``0,System.TimeSpan,System.Byte[])">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.SetAsync``1(System.String,``0,System.TimeSpan,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the value of the specified key
            </summary>
            <typeparam name="T">The type of value to cache</typeparam>
            <param name="key">The key of the value to cache</param>
            <param name="value">The value to cache</param>
            <param name="expiresIn">The time in which the entry expires</param>
            <param name="concurrencyToken">The concurrency token used for optimistic persistency</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Remove(System.String)">
            <summary>
            Removes the specified key
            </summary>
            <param name="key">The key to remove</param>
            <returns>A boolean indicating whether or not the key could be removed</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified key
            </summary>
            <param name="key">The key to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the key could be removed</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetList``1(System.String)">
            <summary>
            Gets the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve</param>
            <returns>The list store at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The list store at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetListElement``1(System.String,System.String)">
            <summary>
            Gets the specified element from the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve an element from</param>
            <param name="elemKey">The key of the element to retrieve</param>
            <returns>The element with the specified key, from the list stored at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.GetListElementAsync``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified element from the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to retrieve an element from</param>
            <param name="elemKey">The key of the element to retrieve</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The element with the specified key, from the list stored at the specified key</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToList``1(System.String,System.String,``0)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToList``1(System.String,System.String,``0,System.DateTime)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresAt">The UTC date and time at which the cached list should expire at</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresAt">The UTC date and time at which the cached list should expire at</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToList``1(System.String,System.String,``0,System.TimeSpan)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresIn">A <see cref="T:System.TimeSpan"/> that represents the time in which the list should expire</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.AddToListAsync``1(System.String,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a new element to the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to add a new element to</param>
            <param name="elemKey">The key of the element to add</param>
            <param name="elem">The element to add</param>
            <param name="expiresIn">A <see cref="T:System.TimeSpan"/> that represents the time in which the list should expire</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.UpdateList``1(System.String,System.String,``0)">
            <summary>
            Updates an element of the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to update an element of</param>
            <param name="elemKey">The key of the element to update</param>
            <param name="elem">The updated element</param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.UpdateListAsync``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Updates an element of the list stored at the specified key
            </summary>
            <typeparam name="T">The type of elements held in the list</typeparam>
            <param name="key">The key of the list to update an element of</param>
            <param name="elemKey">The key of the element to update</param>
            <param name="elem">The updated element</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.RemoveFromList(System.String,System.String)">
            <summary>
            Removes an element from the list stored at the specified key
            </summary>
            <param name="key">The key of the list to remove an element from</param>
            <param name="elemKey">The key of the element to remove</param>
            <returns>A boolean indicating whether or not the element could be removed from the list</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.RemoveFromListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes an element from the list stored at the specified key
            </summary>
            <param name="key">The key of the list to remove an element from</param>
            <param name="elemKey">The key of the element to remove</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A boolean indicating whether or not the element could be removed from the list</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to retrieve the value with the specified key
            </summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="key">The key of the value to retrieve</param>
            <param name="value">The resulting value, of any</param>
            <returns>A boolean indicating whether or not the value with the specified key exists and could be retrieved</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.TryGetListElement``1(System.String,System.String,``0@)">
            <summary>
            Attempts to retrieve a list value with the specified key
            </summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="key">The key of the list to retrieve the value from</param>
            <param name="elemKey">The key of the list element to retrieve</param>
            <param name="value">The resulting value, of any</param>
            <returns>A boolean indicating whether or not the value with the specified key exists and could be retrieved</returns>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Neuroglia.Caching.IDistributedCache.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Clears the cache
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>A new awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
    </members>
</doc>
