<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Blazor.Dagre</name>
    </assembly>
    <members>
        <member name="F:Neuroglia.Blazor.Dagre.Constants.ClusterPaddingX">
            Observed cluster padding, don't know where is comes from. 
            The "ranksep" and "nodesep" default values at 50...?
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.DagreService">
            <summary>
            Wraps Dagre js library as an injectable service
            https://github.com/dagrejs/dagre
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.DagreService.jsRuntime">
            <summary>
            The JS Runtime instance
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Creates a new instance of DagreService
            </summary>
            <param name="jSRuntime"></param>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.ComputePositionsAsync(Neuroglia.Blazor.Dagre.Models.IGraphViewModel,Neuroglia.Blazor.Dagre.Models.IDagreGraphOptions)">
            <summary>
            Computes the nodes and edges position of the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphViewModel"/>
            </summary>
            <param name="graphViewModel"></param>
            <param name="options"></param>
            <returns>The updated <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphViewModel"/></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.DeserializeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.GraphAsync(Neuroglia.Blazor.Dagre.Models.IDagreGraphOptions)">
            <summary>
            Returns a new <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> instance
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.LayoutAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            Computes the graph layout
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.DagreService.SerializeAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.GraphLib">
            <summary>
            Represents a <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> graph instance, with a dagre layout
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.GraphLib.Metadata">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.GraphLib.jsInstance">
            <summary>
            The Graph js instance
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.ChildrenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.FilterNodesAsync(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.GraphAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.HasEdgeAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.HasEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.HasNodeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.EdgeAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.EdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.EdgeCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.EdgesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.InEdgesAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.IsCompoundAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.IsDirectedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.IsMultigraphAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.InstanceAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.NeighborsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.NodeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.NodeCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.NodeEdgesAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.NodesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.OutEdgesAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.ParentAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.PredecessorsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.RemoveEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.RemoveEdgeAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.RemoveNodeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetDefaultEdgeLabelAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetDefaultEdgeLabelAsync(System.Func{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetDefaultNodeLabelAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetDefaultNodeLabelAsync(System.Func{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetGraphAsync(Neuroglia.Blazor.Dagre.Models.IDagreGraphConfig)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetEdgeAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetEdgeAsync(System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetEdgeAsync(System.String,System.String,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetNodeAsync(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetNodesAsync(System.String[],System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetParentAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SetPathAsync(System.String[],System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SinksAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SourcesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.GraphLib.SuccessorsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.ClusterViewModel.AddChildAsync(Neuroglia.Blazor.Dagre.Models.INodeViewModel)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.INodeViewModel"/> to the cluster
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.ClusterViewModel.Flatten(Neuroglia.Blazor.Dagre.Models.IClusterViewModel)">
            <summary>
            Adds nested nodes/clusters to allNodes/Clusters
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Direction">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Alignment">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.NodeSeparation">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.EdgeSeparation">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.RankSeparation">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.MarginX">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.MarginY">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Acyclicer">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Ranker">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Width">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Height">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Label">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.DagreGraphConfig.Metadata">
            <inheritdoc />
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.GraphElement">
            <summary>
            Represents a basic element of <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphViewModel"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphElement.Id">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphElement._label">
            <summary>
            Stores the element's label
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphElement.Label">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphElement._componentType">
            <summary>
            Stores the element's component type
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphElement.ComponentType">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphElement._cssClass">
            <summary>
            Stores the element's css class
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphElement.CssClass">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphElement._metadata">
            <summary>
            Stores the element's metadata
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphElement.Metadata">
            <inheritdoc />
        </member>
        <member name="E:Neuroglia.Blazor.Dagre.Models.GraphElement.Changed">
            <summary>
            The action tiggered when a property changes
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphElement.#ctor">
            <summary>
            Constructs a new <see cref="T:Neuroglia.Blazor.Dagre.Models.GraphElement"/>
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphElement.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Neuroglia.Blazor.Dagre.Models.GraphElement"/>
            </summary>
            <param name="label">The element's label</param>
            <param name="cssClass">The element's css class(es)</param>
            <param name="componentType">The element's component(template) type</param>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphElement.OnChange">
            <summary>
            Invokes the change action
            </summary>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.GraphEventArgs`1">
            <summary>
            Supplies information about a mouse event that's being raised by the graph
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphEventArgs`1.Component">
            <summary>
            The component <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that raised the event
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphEventArgs`1.GraphElement">
            <summary>
            The graph element, <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphElement"/>, that raised the event, if any.
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphEventArgs`1.BaseEvent">
            <summary>
            The <see cref="T:System.EventArgs"/> (<see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> or <see cref="T:Microsoft.AspNetCore.Components.Web.WheelEventArgs"/>)
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphEventArgs`1.#ctor(`0,Microsoft.AspNetCore.Components.ElementReference,Neuroglia.Blazor.Dagre.Models.IGraphElement)">
            <summary>
            Constructs a new <see cref="!:GraphArgs"/>
            </summary>
            <param name="baseEvent"></param>
            <param name="component"></param>
            <param name="graphElement"></param>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.GraphLibEdge">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibEdge.Metadata">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibEdge.Name">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibEdge.V">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibEdge.W">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibEdge.Points">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibNode.Id">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibNode.Label">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibNode.Metadata">
            <inheritdoc />
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.GraphLibOptions">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibOptions.Compound">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibOptions.Directed">
            <inheritdoc />
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.GraphLibOptions.Multigraph">
            <inheritdoc />
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._nodes">
            <summary>
            The first level graph nodes (direct children)
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._allNodes">
            <summary>
            The flattened graph nodes (nested children)
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._edges">
            <summary>
            The graph edges
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._clusters">
            <summary>
            The first level graph clusters (direct children)
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._allClusters">
            <summary>
            The flattened graph clusters (nested children)
            </summary>
        </member>
        <member name="F:Neuroglia.Blazor.Dagre.Models.GraphViewModel._components">
            <summary>
            The map of node type and their component type
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.AddElementAsync(Neuroglia.Blazor.Dagre.Models.IGraphElement)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphElement"/> to the graph
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.AddElementsAsync(System.Collections.Generic.IEnumerable{Neuroglia.Blazor.Dagre.Models.IGraphElement})">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphElement"/>s to the graph
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.AddClusterAsync(Neuroglia.Blazor.Dagre.Models.IClusterViewModel)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.IClusterViewModel"/> to the graph
            </summary>
            <param name="cluster"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.AddNodeAsync(Neuroglia.Blazor.Dagre.Models.INodeViewModel)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.INodeViewModel"/> to the graph
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.AddEdgeAsync(Neuroglia.Blazor.Dagre.Models.IEdgeViewModel)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.Models.IEdgeViewModel"/> to the graph
            </summary>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.RegisterComponentTypeAsync``2">
            <summary>
            Registers a component type associated with a node type
            </summary>
            <typeparam name="TNode"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.GetComponentTypeAsync``1(``0)">
            <summary>
            Gets the component type associated with the specified node type
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.Flatten(Neuroglia.Blazor.Dagre.Models.IClusterViewModel)">
            <summary>
            Adds nested nodes/clusters to allNodes/Clusters
            </summary>
            <param name="cluster"></param>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.RegisterBehavior(Neuroglia.Blazor.Dagre.GraphBehavior)">
            <summary>
            Adds the provided <see cref="T:Neuroglia.Blazor.Dagre.GraphBehavior"/>
            </summary>
            <param name="graphBehavior"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.GraphViewModel.UnregisterBehavior(Neuroglia.Blazor.Dagre.GraphBehavior)">
            <summary>
            Removes the provided <see cref="T:Neuroglia.Blazor.Dagre.GraphBehavior"/>
            </summary>
            <param name="graphBehavior"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.IDagreGraphConfig">
            <summary>
            Represents the <see cref="!:IGraphLib.SetGraph(object)"/> configuration used by Dagre
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.Direction">
            <summary>
            Direction for rank nodes. Can be TB, BT, LR, or RL, where T = top, B = bottom, L = left, and R = right.
            The static class <see cref="T:Neuroglia.Blazor.Dagre.DagreGraphDirection"/> can be used: DagreGraphDirection.TopToBottom, DagreGraphDirection.BottomToTop, DagreGraphDirection.LeftToRight, DagreGraphDirection.RightToLeft
            Default: TB
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.Alignment">
            <summary>
            Alignment for rank nodes. Can be UL, UR, DL, or DR, where U = up, D = down, L = left, and R = right.
            The static class <see cref="T:Neuroglia.Blazor.Dagre.DagreGraphAlignment"/> can be used: DagreGraphAlignment.UpLeft, DagreGraphAlignment.UpRight, DagreGraphAlignment.DownLeft, DagreGraphAlignment.DownRight
            Default: undefined
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.NodeSeparation">
            <summary>
            Number of pixels that separate nodes horizontally in the layout.
            Default: 50
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.EdgeSeparation">
            <summary>
            Number of pixels that separate edges horizontally in the layout.
            Default: 10
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.RankSeparation">
            <summary>
            Number of pixels between each rank in the layout.
            Default: 50
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.MarginX">
            <summary>
            Number of pixels to use as a margin around the left and right of the graph.
            Default: 0
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.MarginY">
            <summary>
            Number of pixels to use as a margin around the top and bottom of the graph.
            Default: 0
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.Acyclicer">
            <summary>
            If set to greedy, uses a greedy heuristic for finding a feedback arc set for a graph. A feedback arc set is a set of edges that can be removed to make a graph acyclic.
            Default: undefined
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Neuroglia.Blazor.Dagre.Models.IDagreGraphLayoutOptions.Ranker" -->
        <member name="T:Neuroglia.Blazor.Dagre.Models.IGraphLib">
            <summary>
            Provides data structures for undirected and directed multi-graphs
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.ChildrenAsync(System.String)">
            <summary>
            Gets list of direct children of node v.
            Complexity: O(1).
            </summary>
            <returns>
            children nodes names list.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.EdgeAsync(System.String,System.String)">
            <summary>
            Gets the label for the specified edge.
            Complexity: O(1).
            </summary>
            <returns>
            value associated with specified edge.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.EdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <summary>
            Gets the label for the specified edge.
            Complexity: O(1).
            </summary>
            <returns>
            value associated with specified edge.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.EdgeCountAsync">
            <summary>
            Gets the number of edges in the graph.
            Complexity: O(1).
            </summary>
            <returns>
            edges count.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.EdgesAsync">
            <summary>
            Gets edges of the graph. In case of compound graph subgraphs are not considered.
            Complexity: O(|E|).
            </summary>
            <returns>
            graph edges list.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.FilterNodesAsync(System.Func{System.String,System.Boolean})">
            <summary>
            Creates new graph with nodes filtered via filter. Edges incident to rejected node
            are also removed. In case of compound graph, if parent is rejected by filter,
            than all its children are rejected too.
            Average-case complexity: O(|E|+|V|).
            </summary>
            <returns>
            new graph made from current and nodes filtered.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.GraphAsync">
            <summary>
            Gets the graph metadata.
            </summary>
            <returns>
            currently assigned label for the graph or undefined if no label assigned.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.HasEdgeAsync(System.String,System.String,System.String)">
            <summary>
            Detects whether the graph contains specified edge or not. No subgraphs are considered.
            Complexity: O(1).
            </summary>
            <returns>
            whether the graph contains the specified edge or not.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.HasEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <summary>
            Detects whether the graph contains specified edge or not. No subgraphs are considered.
            Complexity: O(1).
            </summary>
            <returns>
            whether the graph contains the specified edge or not.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.HasNodeAsync(System.String)">
            <summary>
            Detects whether graph has a node with specified name or not.
            </summary>
            <returns>
            true if graph has node with specified name, false - otherwise.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.InEdgesAsync(System.String,System.String)">
            <summary>
            Return all edges that point to the node v. Optionally filters those edges down to just those
            coming from node u. Behavior is undefined for undirected graphs - use nodeEdges instead.
            Complexity: O(|E|).
            </summary>
            <returns>
            edges descriptors list if v is in the graph, or undefined otherwise.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.IsCompoundAsync">
            <summary>
            Whether graph was created with 'compound' flag set to true or not.
            </summary>
            <returns>
            whether a node of the graph can have subnodes.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.IsDirectedAsync">
            <summary>
            Whether graph was created with 'directed' flag set to true or not.
            </summary>
            <returns>
            whether the graph edges have an orientation.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.IsMultigraphAsync">
            <summary>
            Whether graph was created with 'multigraph' flag set to true or not.
            </summary>
            <returns>
            whether the pair of nodes of the graph can have multiple edges.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.InstanceAsync">
            <summary>
            Gets the underlying <see cref="T:Microsoft.JSInterop.IJSObjectReference"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.NeighborsAsync(System.String)">
            <summary>
            Return all nodes that are predecessors or successors of the specified node or undefined if
            node v is not in the graph.
            Complexity: O(|V|).
            </summary>
            <returns>
            node identifiers list or undefined if v is not in the graph.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.NodeAsync(System.String)">
            <summary>
            Gets the label of node with specified name.
            Complexity: O(|V|).
            </summary>
            <returns>
            label value of the node.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.NodeCountAsync">
            <summary>
            Gets the number of nodes in the graph.
            Complexity: O(1).
            </summary>
            <returns>
            nodes count.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.NodeEdgesAsync(System.String,System.String)">
            <summary>
            Returns all edges to or from node v regardless of direction. Optionally filters those edges
            down to just those between nodes v and w regardless of direction.
            Complexity: O(|E|).
            </summary>
            <returns>
            edges descriptors list if v is in the graph, or undefined otherwise.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.NodesAsync">
            <summary>
            Gets all nodes of the graph. Note, the in case of compound graph subnodes are
            not included in list.
            Complexity: O(1).
            </summary>
            <returns>
            list of graph nodes.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.OutEdgesAsync(System.String,System.String)">
            <summary>
            Return all edges that are pointed at by node v. Optionally filters those edges down to just
            those point to w. Behavior is undefined for undirected graphs - use nodeEdges instead.
            Complexity: O(|E|).
            </summary>
            <returns>
            edges descriptors list if v is in the graph, or undefined otherwise.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.ParentAsync(System.String)">
            <summary>
            Gets parent node for node v.
            Complexity: O(1).
            </summary>
            <returns>
            parent node name or void if v has no parent.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.PredecessorsAsync(System.String)">
            <summary>
            Return all nodes that are predecessors of the specified node or undefined if node v is not in
            the graph. Behavior is undefined for undirected graphs - use neighbors instead.
            Complexity: O(|V|).
            </summary>
            <returns>
            node identifiers list or undefined if v is not in the graph.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.RemoveEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge)">
            <summary>
            Removes the specified edge from the graph. No subgraphs are considered.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.RemoveEdgeAsync(System.String,System.String,System.String)">
            <summary>
            Removes the specified edge from the graph. No subgraphs are considered.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.RemoveNodeAsync(System.String)">
            <summary>
            Remove the node with the name from the graph or do nothing if the node is not in
            the graph. If the node was removed this function also removes any incident
            edges.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetDefaultEdgeLabelAsync(System.Object)">
            <summary>
            Sets the default edge label. This label will be assigned as default label
            in case if no label was specified while setting an edge.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetDefaultEdgeLabelAsync(System.Func{System.String,System.Object})">
            <summary>
            Sets the default edge label factory function. This function will be invoked
            each time when setting an edge with no label specified and returned value
            will be used as a label for edge.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetDefaultNodeLabelAsync(System.Object)">
            <summary>
            Sets the default node label. This label will be assigned as default label
            in case if no label was specified while setting a node.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetDefaultNodeLabelAsync(System.Func{System.String,System.Object})">
            <summary>
            Sets the default node label factory function. This function will be invoked
            each time when setting a node with no label specified and returned value
            will be used as a label for node.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetEdgeAsync(System.String,System.String)">
            <summary>
            Creates or updates the label for the edge (v, w) with the optionally supplied
            name. If label is supplied it is set as the value for the edge. If label is not
            supplied and the edge was created by this call then the default edge label will
            be assigned. The name parameter is only useful with multigraphs.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetEdgeAsync(Neuroglia.Blazor.Dagre.Models.GraphLibEdge,System.Object)">
            <summary>
            Creates or updates the label for the specified edge. If label is supplied it is
            set as the value for the edge. If label is not supplied and the edge was created
            by this call then the default edge label will be assigned. The name parameter is
            only useful with multigraphs.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetGraphAsync(Neuroglia.Blazor.Dagre.Models.IDagreGraphConfig)">
            <summary>
            Sets the metadata of the graph.
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetNodeAsync(System.String,System.Object)">
            <summary>
            Creates or updates the value for the node v in the graph. If label is supplied
            it is set as the value for the node. If label is not supplied and the node was
            created by this call then the default node label will be assigned.
            Complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetNodesAsync(System.String[],System.Object)">
            <summary>
            Invokes setNode method for each node in names list.
            Complexity: O(|names|).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetParentAsync(System.String,System.String)">
            <summary>
            Sets node p as a parent for node v if it is defined, or removes the
            parent for v if p is undefined. Method throws an exception in case of
            invoking it in context of noncompound graph.
            Average-case complexity: O(1).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SetPathAsync(System.String[],System.Object)">
            <summary>
            Establish an edges path over the nodes in nodes list. If some edge is already
            exists, it will update its label, otherwise it will create an edge between pair
            of nodes with label provided or default label if no label provided.
            Complexity: O(|nodes|).
            </summary>
            <returns>
            the graph, allowing this to be chained with other functions.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SinksAsync">
            <summary>
            Gets list of nodes without out-edges.
            Complexity: O(|V|).
            </summary>
            <returns>
            the graph source nodes.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SourcesAsync">
            <summary>
            Gets list of nodes without in-edges.
            Complexity: O(|V|).
            </summary>
            <returns>
            the graph source nodes.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLib.SuccessorsAsync(System.String)">
            <summary>
            Return all nodes that are successors of the specified node or undefined if node v is not in
            the graph. Behavior is undefined for undirected graphs - use neighbors instead.
            Complexity: O(|V|).
            </summary>
            <returns>
            node identifiers list or undefined if v is not in the graph.
            </returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.ComponentsAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            Finds all connected components in a graph and returns an array of these components. Each component is itself an array that contains the ids of nodes in the component.
            This function takes O(|V|) time.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.DijkstraAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.String,System.Func{Neuroglia.Blazor.Dagre.Models.IGraphLibEdge,System.Double},System.Func{System.String,System.Object})">
            <summary>
            This function is an implementation of Dijkstra's algorithm which finds the shortest path from source to all other nodes in g. This function returns a map of v -> { distance, predecessor }. The distance property holds the sum of the weights from source to v along the shortest path or Number.POSITIVE_INFINITY if there is no path from source. The predecessor property can be used to walk the individual elements of the path from source to v in reverse order.
            It takes an optional weightFn(e) which returns the weight of the edge e.If no weightFn is supplied then each edge is assumed to have a weight of 1. This function throws an Error if any of the traversed edges have a negative edge weight.
            It takes an optional edgeFn(v) which returns the ids of all edges incident to the node v for the purposes of shortest path traversal. By default this function uses the g.outEdges.
            It takes O((|E| + |V|) * log |V|) time.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="weightFn"></param>
            <param name="edgeFn"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.DijkstraAllAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.String,System.Func{Neuroglia.Blazor.Dagre.Models.IGraphLibEdge,System.Double},System.Func{System.String,System.Object})">
            <summary>
            This function finds the shortest path from each node to every other reachable node in the graph. It is similar to alg.dijkstra, but instead of returning a single-source array, it returns a mapping of of source -> alg.dijksta(g, source, weightFn, edgeFn).
            This function takes an optional weightFn(e) which returns the weight of the edge e.If no weightFn is supplied then each edge is assumed to have a weight of 1. This function throws an Error if any of the traversed edges have a negative edge weight.
            This function takes an optional edgeFn(u) which returns the ids of all edges incident to the node u for the purposes of shortest path traversal. By default this function uses g.outEdges.
            This function takes O(|V| * (|E| + |V|) * log |V|) time.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="weightFn"></param>
            <param name="edgeFn"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.FindCyclesAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            Given a Graph, g, this function returns all nodes that are part of a cycle.As there may be more than one cycle in a graph this function return an array of these cycles, where each cycle is itself represented by an array of ids for each node involved in that cycle.
            alg.isAcyclic is more efficient if you only need to determine whether a graph has a cycle or not.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.FloydWarchallAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.String,System.Func{Neuroglia.Blazor.Dagre.Models.IGraphLibEdge,System.Double},System.Func{System.String,System.Object})">
            <summary>
            This function is an implementation of the Floyd-Warshall algorithm, which finds the shortest path from each node to every other reachable node in the graph. It is similar to alg.dijkstraAll, but it handles negative edge weights and is more efficient for some types of graphs. This function returns a map of source -> { target -> { distance, predecessor }. The distance property holds the sum of the weights from source to target along the shortest path of Number.POSITIVE_INFINITY if there is no path from source. The predecessor property can be used to walk the individual elements of the path from source to target in reverse order.
            This function takes an optional weightFn(e) which returns the weight of the edge e.If no weightFunc is supplied then each edge is assumed to have a weight of 1.
            This function takes an optional edgeFn(v) which returns the ids of all edges incident to the node v for the purposes of shortest path traversal. By default this function uses the outEdges function on the supplied graph.
            This algorithm takes O(|V|^3) time.
            </summary>
            <param name="graph"></param>
            <param name="source"></param>
            <param name="weightFn"></param>
            <param name="edgeFn"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.IsAcyclicAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            Given a Graph, g, this function returns true if the
            graph has no cycles and returns false if it does.This algorithm returns as soon as it detects the first cycle.You can use
            alg.findCycles to get the actual list of cycles in the graph.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.PostorderAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.String)">
            <summary>
            This function performs a postorder traversal of the graph g starting at the nodes vs. For each node visited, v, the function callback(v) is called.
            </summary>
            <param name="graph"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.PreorderAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.String)">
            <summary>
            This function performs a preorder traversal of the graph g starting at the nodes vs. For each node visited, v, the function callback(v) is called.
            </summary>
            <param name="graph"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.PrimAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib,System.Func{Neuroglia.Blazor.Dagre.Models.IGraphLibEdge,System.Double})">
            <summary>
            Prim's algorithm takes a connected undirected graph and generates a minimum spanning tree. This function returns the minimum spanning tree as an undirected graph. This algorithm is derived from the description in "Introduction to Algorithms", Third Edition, Cormen, et al., Pg 634.
            This function takes a weightFn(e) which returns the weight of the edge e.It throws an Error if the graph is not connected.
            This function takes O(|E| log |V|) time.
            </summary>
            <param name="graph"></param>
            <param name="weightFn"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.TarjamAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            This function is an implementation of Tarjan's algorithm which finds all strongly connected components in the directed graph g. Each strongly connected component is composed of nodes that can reach all other nodes in the component via directed edges. A strongly connected component can consist of a single node if that node cannot both reach and be reached by any other specific node in the graph. Components of more than one node are guaranteed to have at least one cycle.
            This function returns an array of components.Each component is itself an array that contains the ids of all nodes in the component.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibAlg.TopsortAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            An implementation of topological sorting.
            Given a Graph g this function returns an array of nodes such that for each edge u -> v, u appears before v in the array.If the graph has a cycle it is impossible to generate such a list and CycleException is thrown.
            Takes O(|V| + |E|) time.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.IGraphLibEdge">
            <summary>
            Represents a <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> edge
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibEdge.Name">
            <summary>
            The name that uniquely identifies a multi-edge.
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibEdge.V">
            <summary>
            The id of one node
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibEdge.W">
            <summary>
            The id of the other node
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibEdge.Points">
            <summary>
            The edge points
            </summary>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.IGraphLibJsonConverter">
            <summary>
            Used to serialize/deserialize a <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> to/from JSON
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibJsonConverter.SerializeAsync(Neuroglia.Blazor.Dagre.Models.IGraphLib)">
            <summary>
            Serializes a <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> to JSON (aka GraphLib json.write(g))
            </summary>
            <param name="graph"></param>
            <returns>The serialized <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/></returns>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.Models.IGraphLibJsonConverter.DeserializeAsync(System.String)">
            <summary>
            Deserializes a JSON to a 
            </summary>
            <param name="json"></param> <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/> (aka GraphLib json.read(json))
            <returns>The deserialied <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/></returns>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.Models.IGraphLibOptions">
            <summary>
            Represents the options used to construct a new <see cref="T:Neuroglia.Blazor.Dagre.Models.IGraphLib"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibOptions.Compound">
            <summary>
            Set to true to allow a graph to have compound nodes - nodes which can be the parent of other nodes. Default: false.
            </summary>
            
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibOptions.Directed">
            <summary>
            Set to true to get a directed graph and false to get an undirected graph. An undirected graph does not treat the order of nodes in an edge as significant. In other words, g.edge("a", "b") === g.edge("b", "a") for an undirected graph. Default: true.
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IGraphLibOptions.Multigraph">
            <summary>
            Set to true to allow a graph to have multiple edges between the same pair of nodes. Default: false.
            </summary>
        </member>
        <member name="P:Neuroglia.Blazor.Dagre.Models.IMetadata.Metadata">
            <summary>
            The metadata payload
            </summary>
        </member>
        <member name="T:Neuroglia.Blazor.Dagre.ProfilingTimer">
            <summary>
            A timer used to perform basic profiling
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.ProfilingTimer.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Neuroglia.Blazor.Dagre.ProfilingTimer"/>
            </summary>
            <param name="label">The timer label</param>
            <param name="stackDepth">The stack trace depth to display</param>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.ProfilingTimer.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.ProfilingTimer.Stop">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.ProfilingTimer.Dispose(System.Boolean)">
            <summary>
            Disposes the resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Neuroglia.Blazor.Dagre.ProfilingTimer.Dispose">
            <summary>
            Implements <see cref="T:System.IDisposable"/>
            </summary>
        </member>
    </members>
</doc>
