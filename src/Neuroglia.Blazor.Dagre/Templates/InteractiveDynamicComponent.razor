@implements IDisposable

<g
    @ref="elementReference"
    @onmousedown:stopPropagation
    @onmouseup:stopPropagation
>
    <CascadingValue Value="graph">
        <DynamicComponent Type="type" Parameters="parameters" />
    </CascadingValue>

</g>
@code {

    IGraphViewModel? graph;
    Type type = null!;
    IDictionary<string, object>? parameters;
    ElementReference elementReference;
    bool isDirty;
    bool disposed;

    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter] public virtual Type Type { get; set; } = null!;

    [Parameter] public virtual IDictionary<string, object> Parameters { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (this.graph != this.Graph)
        {
            this.graph = this.Graph;
            this.isDirty = true;
        }
        if (this.parameters != this.Parameters)
        {
            this.parameters = this.Parameters;
            this.isDirty = true;
        }
        if (this.type != this.Type)
        {
            this.type = this.Type;
            this.isDirty = true;
        }
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;

    }

    protected virtual IGraphElement Element => (IGraphElement)this.Parameters["Element"];

    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

}
