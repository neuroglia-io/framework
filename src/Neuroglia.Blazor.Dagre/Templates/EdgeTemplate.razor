<g class="edge-path @Edge.CssClass">
    <path 
        d="@GetPath(Edge)"
        marker-start="@GetDefinitionUrl(Edge.StartMarkerId)"
        marker-end="@GetDefinitionUrl(Edge.EndMarkerId)"
    />
    @if (LabelCenter != null && !string.IsNullOrWhiteSpace(Edge.Label)) {
        <g class="edge-label label">
            <foreignObject 
                x="@((LabelCenter.X - Edge.BBox.Width / 2).ToInvariantString())"
                y="@(LabelCenter.Y.ToInvariantString())" 
                width="@Edge.BBox.Width.ToInvariantString()" 
                height="@Constants.LabelHeight"
            >
                <div>@Edge.Label</div>
            </foreignObject>
        </g>
    }
    @if (Graph.EnableProfiling) {
        @foreach(var point in Edge.Points)
        {
            <circle cx="@point.X" cy="@point.Y" r="1" fill="red" />
        }
    }
</g>

@code {
    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual IEdgeViewModel Edge => (IEdgeViewModel)this.Element;

    protected virtual IPosition? LabelCenter { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Edge.Points.Any()) {
            var index = (int)Math.Ceiling((double)(this.Edge.Points.Count() / 2)) - 1;
            this.LabelCenter = this.Edge.Points.ElementAt(index);
        }
    }

    protected virtual string GetPath(IEdgeViewModel edge)
    {
        switch(edge.Shape)
        {
            case EdgeShape.BSpline:
                //return PathBuilder.GetBSplinePath(edge.Points);                
            default:
                return PathBuilder.GetLinearPath(edge.Points);
        }
    }

    protected virtual string? GetDefinitionUrl(string? marker)
    {
        if (string.IsNullOrWhiteSpace(marker))
        {
            return null;
        }
        return $"url(#{marker})";
    }

}
