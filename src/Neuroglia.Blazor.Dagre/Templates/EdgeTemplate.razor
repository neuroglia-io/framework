<g class="edge-path @Edge.CssClass">
    <path 
        d="@GetPath(Edge)"
        marker-start="@GetDefinitionUrl(Edge.StartMarkerId)"
        marker-end="@GetDefinitionUrl(Edge.EndMarkerId)"
    />
    @if (LabelCenter != null && !string.IsNullOrWhiteSpace(Edge.Label)) {
        <g class="edge-label label">
            <foreignObject 
                x="@((LabelCenter.Position.X - Edge.Bounds.Size.Width / 2).ToInvariantString())"
                y="@(LabelCenter.Position.Y.ToInvariantString())" 
                width="@Edge.Bounds.Size.Width.ToInvariantString()" 
                height="@Constants.LabelHeight"
            >
                <div>@Edge.Label</div>
            </foreignObject>
        </g>
    }
</g>

@code {

    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual IEdgeViewModel Edge => (IEdgeViewModel)this.Element;

    protected virtual IPositionable? LabelCenter { get; set; }

    protected virtual string GetPath(IEdgeViewModel edge)
    {
        return edge.Shape switch
        {
            // EdgeShape.BSpline => PathBuilder.GetBSplinePath(edge.Points), //todo
            _ => PathBuilder.GetLinearPath(edge.Points)
        };
    }

    protected virtual string? GetDefinitionUrl(string? marker)
    {
        if (string.IsNullOrWhiteSpace(marker)) return null;
        else return $"url(#{marker})";
    }

}
