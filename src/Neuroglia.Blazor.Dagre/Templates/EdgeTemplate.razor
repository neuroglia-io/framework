<g id="@($"{Edge.SourceId}-{Edge.TargetId}{(!string.IsNullOrEmpty(Edge.Label) ? $"-{Edge.Label}" : "")}")" class="edge-path @Edge.CssClass">
    <path 
        d="@GetPath(Edge)"
        marker-start="@GetDefinitionUrl(Edge.StartMarkerId)"
        marker-end="@GetDefinitionUrl(Edge.EndMarkerId)"
    />
    @if (LabelCenter != null && !string.IsNullOrWhiteSpace(Edge.Label)) {
        <g class="edge-label label">
            <foreignObject 
                x="@(LabelCenter.X.ToInvariantString())"
                y="@(LabelCenter.Y.ToInvariantString())" 
                width="@Edge.Width.ToInvariantString()" 
                height="@Edge.Height.ToInvariantString()"
            >
                <div title="@Edge.Label" class="label-content">@Edge.Label</div>
            </foreignObject>
        </g>
    }
    @if (Graph.EnableProfiling) {
        @foreach(var point in Edge.Points)
        {
            <circle cx="@point.X" cy="@point.Y" r="1" fill="red" />
        }
        @if (Edge.Bounds != null)
        {
            <Rectangle Bounds="Edge.Bounds" />
        }
    }
</g>

@code {
    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual IEdgeViewModel Edge => (IEdgeViewModel)this.Element;

    protected virtual IPositionable? LabelCenter { get; set; }

    protected override void OnParametersSet()
    {
        this.LabelCenter = new Position(
            this.Edge.X - (this.Edge.Width / 2),
            this.Edge.Y - (this.Edge.Height / 2)
        );
    }

    protected virtual string GetPath(IEdgeViewModel edge)
    {
        switch(edge.Shape)
        {
            case EdgeShape.BSpline:
                //return PathBuilder.GetBSplinePath(edge.Points);                
            default:
                return PathBuilder.GetLinearPath(edge.Points);
        }
    }

    protected virtual string? GetDefinitionUrl(string? marker)
    {
        if (string.IsNullOrWhiteSpace(marker))
        {
            return null;
        }
        return $"url(#{marker})";
    }

}
