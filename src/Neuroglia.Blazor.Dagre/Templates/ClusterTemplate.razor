@implements IDisposable

<g class="cluster @Cluster.CssClass" transform="translate(@Cluster.Position.X, @Cluster.Position.Y)">
    <g class="cluster-shape">
        @if (Cluster.Shape == NodeShape.Circle)
        {
            <Circle BoundingBox="Cluster.BBox" />
        }
        else if (Cluster.Shape == NodeShape.Ellipse)
        {
            <Ellipse BBox="Cluster.BBox" />
        }
        else
        {        
            <Rectangle BBox="Cluster.BBox" RadiusX="Cluster.Radius?.X" RadiusY="Cluster.Radius?.Y" />
        }
    </g>
    @if (!string.IsNullOrWhiteSpace(Cluster.Label)) {
        <g class="label">
            <foreignObject 
                x="@Cluster.Position!.X"
                y="@(Cluster.Size.Height / 2)" 
                width="@Cluster.Size.Width" 
                height="@Constants.LabelHeight"
            >
                <div>@Cluster.Label</div>
            </foreignObject>
        </g>
    }
</g>

@code {

    IGraphViewModel? graph;
    IGraphElement? element;
    bool isDirty;
    bool disposed;

    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;
    
    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual IClusterViewModel Cluster => (IClusterViewModel)this.Element;

    protected override void OnParametersSet()
    {
        if (this.graph != this.Graph)
        {
            this.graph = this.Graph;
            this.isDirty = true;
        }
        if (this.element != this.Element)
        {
            this.element = this.Element;
            this.Cluster.Changed += this.TriggerRender;
            this.isDirty = true;
        }
    }

    protected void TriggerRender()
    {
        this.isDirty = true;
        this.StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.Cluster.Changed -= this.TriggerRender;
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}
