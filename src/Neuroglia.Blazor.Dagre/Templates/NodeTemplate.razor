@implements IDisposable

<g class="node @Node.CssClass" transform="translate(@Node.Position.X, @Node.Position.Y)">
    <g class="node-shape">
        @if (Node.Shape == NodeShape.Circle)
        {
            <Circle Size="Node.Size" />
        }
        else if (Node.Shape == NodeShape.Ellipse)
        {
            <Ellipse Size="Node.Size" />
        }
        else
        {
            <Rectangle Size="Node.Size" RadiusX="Node.Radius?.X" RadiusY="Node.Radius?.Y" />
        }
    </g>
    @if (!string.IsNullOrWhiteSpace(Node.Label)) {
        <g class="label">
            <foreignObject 
                x="@Node.Position.X"
                y="@(0 - Constants.LabelHeight / 2)" 
                width="@Node.Size.Width" 
                height="@Constants.LabelHeight">
                <div>@Node.Label</div>
            </foreignObject>
        </g>
    }
</g>

@code {

    IGraphViewModel? graph;
    IGraphElement? element;
    bool isDirty;
    bool disposed;

    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual INodeViewModel Node => (INodeViewModel)this.Element;

    protected override void OnParametersSet()
    {
        if (this.graph != this.Graph)
        {
            this.graph = this.Graph;
            this.isDirty = true;
        }
        if (this.element != this.Element)
        {
            this.element = this.Element;
            this.Node.Changed += this.TriggerRender;
            this.isDirty = true;
        }
    }

    protected void TriggerRender()
    {
        this.isDirty = true;
        this.StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.Node.Changed -= this.TriggerRender;
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

}
