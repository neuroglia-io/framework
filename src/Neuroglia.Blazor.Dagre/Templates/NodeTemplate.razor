@implements IDisposable

<g id="@Node.Id" class="node @Node.CssClass" transform="translate(@(Node.X.ToInvariantString()), @(Node.Y.ToInvariantString()))">
    <g class="node-shape">
        @if (Node.Shape == NodeShape.Circle)
        {
            <Circle Bounds="Node.Bounds" />
        }
        else if (Node.Shape == NodeShape.Ellipse)
        {
            <Ellipse Bounds="Node.Bounds" />
        }
        else
        {
            <Rectangle Bounds="Node.Bounds" RadiusX="Node.RadiusX" RadiusY="Node.RadiusY" />
        }
    </g>
    @if (!string.IsNullOrWhiteSpace(Node.Label)) {
        <g class="label">
            <foreignObject 
                x="@((Node.Bounds!.X).ToInvariantString())"
                y="@((0 - Constants.LabelHeight / 2).ToInvariantString())" 
                width="@Node.Bounds!.Width.ToInvariantString()" 
                height="@Constants.LabelHeight"
            >
                <div title="@Node.Label" class="label-content">@Node.Label</div>
            </foreignObject>
        </g>
    }
    @if (Graph.EnableProfiling) {
        <circle cx="0" cy="0" r="1" fill="red" />
    }
</g>

@code {
    private IGraphViewModel? graph;
    [CascadingParameter] public virtual IGraphViewModel Graph { get; set; } = null!;

    private IGraphElement? element;
    [Parameter] public virtual IGraphElement Element { get; set; } = null!;

    protected virtual INodeViewModel Node => (INodeViewModel)this.Element;

    bool isDirty = false;    
    ProfilingTimer? profilingTimer;
    protected bool EnableProfiling
    {
        get => this.Graph?.EnableProfiling ?? false;
        set
        {
            if (this.Graph != null && this.Graph.EnableProfiling != value) {
                this.Graph.EnableProfiling = value;
            }
            if (value) this.CreateProfilingTimer();
        }
    }

    protected virtual void CreateProfilingTimer()
    {
        if (this.profilingTimer == null)
            this.profilingTimer = new ProfilingTimer("NodeTemplate", 3);
    }

    protected override void OnParametersSet()
    {
        if (this.graph != this.Graph)
        {
            this.graph = this.Graph;
            this.isDirty = true;
        }
        if (this.element != this.Element)
        {
            this.element = this.Element;
            this.Node.Changed += this.TriggerRender;
            this.isDirty = true;
        }
        if (this.EnableProfiling) this.CreateProfilingTimer();
        this.profilingTimer?.Start();
    }

    protected void TriggerRender(object? sender, EventArgs e)
    {
        this.profilingTimer?.Start();
        this.isDirty = true;
        this.StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        this.profilingTimer?.Stop();
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;

    }

    private bool disposed;
    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.Node.Changed -= this.TriggerRender;
            if (this.EnableProfiling && this.profilingTimer != null)
            {
                this.profilingTimer.Dispose();
            }
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}
