@using Microsoft.AspNetCore.Components.Web
@inject IGraphLayoutService GraphLayoutService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (graph != null) {
    <svg class="svg-definitions"
    version="1.2"
    baseProfile="tiny"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <svg id="center-target" viewBox="0 0 29.334 29.334">
                <!-- from https://www.svgrepo.com/svg/174124/circle-outline-with-huge-dot-at-the-center -->
                <path d="M14.666,0C6.578,0,0,6.58,0,14.667s6.578,14.667,14.666,14.667s14.668-6.58,14.668-14.667S22.754,0,14.666,0z
                    M14.666,25.334C8.784,25.334,4,20.549,4,14.667S8.784,4,14.666,4c5.883,0,10.668,4.785,10.668,10.667S20.547,25.334,14.666,25.334
                    z M19.332,14.667c0,2.577-2.089,4.667-4.666,4.667c-2.576,0-4.666-2.089-4.666-4.667C10,12.09,12.09,10,14.666,10
                    C17.243,10,19.332,12.09,19.332,14.667z"/>
            </svg>
            <svg id="fit"  viewBox="4 4 24 24">
                <!-- from https://github.com/carbon-design-system/carbon -->
                <polygon points="22 16 24 16 24 8 16 8 16 10 22 10 22 16"/>
                <polygon points="8 24 16 24 16 22 10 22 10 16 8 16 8 24"/>
            </svg>
            <svg id="save" viewBox="0 0 24 24">
                <!-- from https://www.svgrepo.com/svg/432286/save-down-2 -->
                <path d="M18.437,20.948H5.563a2.372,2.372,0,0,1-2.5-2.21v-11a2.372,2.372,0,0,1,2.5-2.211h.462a.5.5,0,0,1,0,1H5.563a1.38,1.38,0,0,0-1.5,1.211v11a1.38,1.38,0,0,0,1.5,1.21H18.437a1.38,1.38,0,0,0,1.5-1.21v-11a1.38,1.38,0,0,0-1.5-1.211h-.462a.5.5,0,0,1,0-1h.462a2.372,2.372,0,0,1,2.5,2.211v11A2.372,2.372,0,0,1,18.437,20.948Z" />
                <path d="M15.355,10.592l-3,3a.5.5,0,0,1-.35.15.508.508,0,0,1-.36-.15l-3-3a.5.5,0,0,1,.71-.71l2.14,2.139V3.552a.508.508,0,0,1,.5-.5.5.5,0,0,1,.5.5v8.49l2.15-2.16a.5.5,0,0,1,.71.71Z" />
            </svg>
            <svg id="toggle-orientation" viewBox="0 0 16 16">
                <!-- from https://www.svgrepo.com/svg/371431/orientation -->
                <path d="M11 2.1c2 0 3 1.3 3 2.9h-1l1.5 2 1.5-2h-1c0-2.2-2-3.9-4-3.9v-1.1l-2 1.5 2 1.5v-0.9z"></path>
                <path d="M9 9h6v6h-7v-15h-8v16h16v-8h-7v1zM7 8h-1v1h1v6h-6v-14h6v7z"></path>
                <path d="M2 8h1v1h-1v-1z"></path>
                <path d="M4 8h1v1h-1v-1z"></path>
            </svg>
        </defs>
    </svg>

    <div class="graph-container">
        <CascadingValue Value="graph">
            <svg @ref="graphReference"
            class="graph-canvas @graph.CssClass"
            width="@(graph.Width != 0 ? graph.Width.ToString() : "100%")"
            height="@(graph.Height != 0 ? graph.Height.ToString() : "100%")"
            @onmouseenter="HandleOnMouseEnter"
            @onmouseleave="HandleOnMouseLeave"
            @onmousedown="HandleOnMouseDown"
            @onmouseup="HandleOnMouseUp"
            @onmousemove="HandleOnMouseMove"
            @onwheel="HandleOnWheel"
            >
                <defs>
                    @foreach(var def in graph.ReferenceableComponentTypes)
                    {
                        <DynamicComponent @key="def" Type="def" />
                    }
                </defs>
                <g 
                class="graph"
                transform="scale(@(graph.Scale.ToInvariantString())) translate(@graph.X.ToInvariantString(), @graph.Y.ToInvariantString())"
                >
                    <g class="clusters">
                        @foreach(var cluster in graph.AllClusters.Values)
                        {
                            @if (cluster != null)
                            {
                                <InteractiveDynamicComponent @key="cluster" Type="graph.GetComponentType(cluster)" Parameters="GetComponentParameter(cluster)" />
                            }
                        }
                    </g>
                    <g class="edges">
                        @foreach(var edge in graph.Edges.Values)
                        {
                            @if (edge != null)
                            {
                                <DynamicComponent @key="edge" Type="graph.GetComponentType(edge)" Parameters="GetComponentParameter(edge)" />
                            }
                        }
                    </g>
                    <g class="nodes">
                        @foreach(var node in graph.AllNodes.Values)
                        {
                            @if (node != null)
                            {
                                <InteractiveDynamicComponent @key="node" Type="graph.GetComponentType(node)" Parameters="GetComponentParameter(node)" />
                            }
                        }
                    </g>
                </g>
            </svg>
        </CascadingValue>
        <div class="graph-controls">
            @if (ExtraControls != null)
            {
                @ExtraControls
            }
            @if (CenterControl != null)
            {
                <CascadingValue Value="this">
                    @CenterControl
                </CascadingValue>
            }
            else
            {
                <button class="btn" type="button" @onclick="CenterAsync" title="Center graph">
                    <svg>
                        <use href="#center-target" />
                    </svg>
                </button>
            }
            @if (ZoomToFitControl != null)
            {
                <CascadingValue Value="this">
                    @ZoomToFitControl
                </CascadingValue>
            }
            else
            {
                <button class="btn" type="button" @onclick="ZoomToFitAsync" title="Zoom to fit">
                    <svg>
                        <use href="#fit" />
                    </svg>
                </button>
            }
            @if (SaveAsPngControl != null)
            {
                <CascadingValue Value="this">
                    @SaveAsPngControl
                </CascadingValue>
            }
            else
            {
                <button class="btn" type="button" @onclick="SaveAsPngAsync" title="Save as png">
                    <svg>
                        <use href="#save" />
                    </svg>
                </button>
            }
            <!--<button class="btn" type="button" @onclick="ToggleOrientationAsync" title="toggle orientation">
            <svg>
            <use href="#toggle-orientation" />
            </svg>
            </button>-->
        </div>
    </div>
}

@code {
    private IDagreGraphOptions? options = null;
    [Parameter] public IDagreGraphOptions? Options { get; set; }

    private IGraphViewModel? graph { get; set; }
    [Parameter] public IGraphViewModel? Graph { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseEnter { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseLeave { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseDown { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseUp { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseMove { get; set; }

    [Parameter] public EventCallback<GraphEventArgs<WheelEventArgs>> OnWheel { get; set; }

    [Parameter] public RenderFragment? CenterControl { get; set; }

    [Parameter] public RenderFragment? ZoomToFitControl { get; set; }

    [Parameter] public RenderFragment? SaveAsPngControl { get; set; }

    [Parameter] public RenderFragment? ExtraControls { get; set; }

    ElementReference graphReference;
    bool isDirty = false;
    ProfilingTimer? profilingTimer;
    protected bool EnableProfiling
    {
        get => this.graph?.EnableProfiling ?? false;
        set
        {
            if (this.graph != null && this.graph.EnableProfiling != value) {
                this.graph.EnableProfiling = value;
            }
            if (value) this.CreateProfilingTimer();
        }
    }

    protected void CreateProfilingTimer()
    {
        if (this.profilingTimer == null)
            this.profilingTimer = new ProfilingTimer("DagreGraph", 3);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.options != this.Options)
        {
            this.options = this.Options;
        }
        if (this.Graph != null && this.graph != this.Graph)
        {
            this.graph = this.Graph;
            if (this.EnableProfiling) this.CreateProfilingTimer();
            this.RemoveHandlers();
            this.graph.Changed += this.TriggerRender;
            this.graph.MouseEnter += this.InvokeMouseEnter;
            this.graph.MouseLeave += this.InvokeMouseLeave;
            this.graph.MouseDown += this.InvokeMouseDown;
            this.graph.MouseUp += this.InvokeMouseUp;
            this.graph.MouseMove += this.InvokeMouseMove;
            this.graph.Wheel += this.InvokeWheel;
            //this.Graph.ShowConstruction = true;
            await this.RefreshAsync();
            this.isDirty = true;
            //Console.WriteLine(await this.DagreService.SerializeAsync(this.Graph.DagreGraph!));
            //Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(this.Graph));
        }
        this.profilingTimer?.Start();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        this.profilingTimer?.Stop();
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;

    }

    protected void TriggerRender(object? sender, EventArgs e)
    {
        this.profilingTimer?.Start();
        this.isDirty = true;
        this.StateHasChanged();
    }

    protected async Task InvokeMouseEnter(GraphEventArgs<MouseEventArgs> e)
    {
        await this.OnMouseEnter.InvokeAsync(e);
    }

    protected async Task InvokeMouseLeave(GraphEventArgs<MouseEventArgs> e)
    {
        await this.OnMouseLeave.InvokeAsync(e);
    }

    protected async Task InvokeMouseDown(GraphEventArgs<MouseEventArgs> e)
    {
        await this.OnMouseDown.InvokeAsync(e);
    }

    protected async Task InvokeMouseUp(GraphEventArgs<MouseEventArgs> e)
    {
        await this.OnMouseUp.InvokeAsync(e);
    }

    protected async Task InvokeMouseMove(GraphEventArgs<MouseEventArgs> e)
    {
        await this.OnMouseMove.InvokeAsync(e);
    }

    protected async Task InvokeWheel(GraphEventArgs<WheelEventArgs> e)
    {
        await this.OnWheel.InvokeAsync(e);
    }

    protected virtual void RemoveHandlers()
    {
        if (this.graph != null)
        {
            this.graph.Changed -= this.TriggerRender;
            this.graph.MouseEnter -= this.InvokeMouseEnter;
            this.graph.MouseLeave -= this.InvokeMouseLeave;
            this.graph.MouseDown -= this.InvokeMouseDown;
            this.graph.MouseUp -= this.InvokeMouseUp;
            this.graph.MouseMove -= this.InvokeMouseMove;
            this.graph.Wheel -= this.InvokeWheel;
        }
    }

    public virtual async Task RefreshAsync()
    {
        if (this.graph != null)
        {
            await this.GraphLayoutService.ComputeLayoutAsync(this.graph, this.options);
            this.TriggerRender(this, new());
            await this.ZoomToFitAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await this.JSRuntime.InvokeVoidAsync("neuroglia.blazor.preventScroll", this.graphReference);
    }

    public virtual async Task CenterAsync()
    {
        if (this.graph == null) 
            return;
        var position = await this.JSRuntime.InvokeAsync<BoundingBox>("neuroglia.blazor.getCenter", this.graphReference);
        this.graph.X = position.X;
        this.graph.Y = position.Y;
        this.isDirty = true;
    }

    public virtual async Task CenterAsync(INodeViewModel node)
    {
        if (this.graph == null)
            return;
        var position = await this.JSRuntime.InvokeAsync<BoundingBox>("neuroglia.blazor.getCenter", this.graphReference, node);
        this.graph.X = position.X;
        this.graph.Y = position.Y;
        this.isDirty = true;
    }

    public virtual async Task ZoomToFitAsync()
    {
        if (this.graph == null) 
            return;
        this.graph.Scale = Math.Clamp(await this.JSRuntime.InvokeAsync<decimal>("neuroglia.blazor.getScale", this.graphReference), Constants.MinScale, Constants.MaxScale);
        this.TriggerRender(this, new());
        await this.CenterAsync();
    }

    public virtual async Task SaveAsPngAsync()
    {
        if (this.graph == null)
            return;
        await this.JSRuntime.InvokeVoidAsync("neuroglia.blazor.saveAsPng", this.graphReference);
    }

    public virtual async Task ToggleOrientationAsync()
    {
        if (this.graph == null || this.options == null)
            return;
        if (string.IsNullOrEmpty(this.options.Direction) || this.options.Direction == DagreGraphDirection.TopToBottom)
        {
            this.options.Direction = DagreGraphDirection.LeftToRight;
        }
        else
        {
            this.options.Direction = DagreGraphDirection.TopToBottom;
        }
        await this.RefreshAsync();
    }

    protected virtual Dictionary<string, object> GetComponentParameter(IGraphElement element)
    {
        var parameters = new Dictionary<string, object>()
        {
            { "Element", element }
        };
        return parameters;
    }

    protected virtual async Task HandleOnMouseEnter(MouseEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnMouseEnterAsync(this.graphReference, e, null);
    }

    protected virtual async Task HandleOnMouseLeave(MouseEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnMouseLeaveAsync(this.graphReference, e, null);
    }

    protected virtual async Task HandleOnMouseDown(MouseEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnMouseDownAsync(this.graphReference, e, null);
    }

    protected virtual async Task HandleOnMouseMove(MouseEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnMouseMoveAsync(this.graphReference, e, null);
    }

    protected virtual async Task HandleOnMouseUp(MouseEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnMouseUpAsync(this.graphReference, e, null);
    }

    protected virtual async Task HandleOnWheel(WheelEventArgs e)
    {
        if (this.graph != null)
            await this.graph.OnWheelAsync(this.graphReference, e, null);
    }

    private bool disposed;
    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.RemoveHandlers();
            if (this.EnableProfiling && this.profilingTimer != null)
            {
                this.profilingTimer.Dispose();
            }
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}