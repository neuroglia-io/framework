@implements IDisposable

@if (graph != null) {
    <svg id="svg-definitions"
         version="1.2"
         baseProfile="tiny"
         xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <svg id="center-target" viewBox="0 0 29.334 29.334">
                <!-- from https://www.svgrepo.com/svg/174124/circle-outline-with-huge-dot-at-the-center -->
                <path d="M14.666,0C6.578,0,0,6.58,0,14.667s6.578,14.667,14.666,14.667s14.668-6.58,14.668-14.667S22.754,0,14.666,0z
                    M14.666,25.334C8.784,25.334,4,20.549,4,14.667S8.784,4,14.666,4c5.883,0,10.668,4.785,10.668,10.667S20.547,25.334,14.666,25.334
                    z M19.332,14.667c0,2.577-2.089,4.667-4.666,4.667c-2.576,0-4.666-2.089-4.666-4.667C10,12.09,12.09,10,14.666,10
                    C17.243,10,19.332,12.09,19.332,14.667z"/>
            </svg>
            <svg id="fit"  viewBox="4 4 24 24">
                <!-- from https://github.com/carbon-design-system/carbon -->
                <polygon points="22 16 24 16 24 8 16 8 16 10 22 10 22 16"/>
                <polygon points="8 24 16 24 16 22 10 22 10 16 8 16 8 24"/>
            </svg>
        </defs>
    </svg>

    <div class="graph-container">
        <CascadingValue Value="graph">
            <svg @ref="graphReference"
                class="graph-canvas @graph.CssClass"
                width="@(graph.Size.Width.ToString() ?? "100%")" 
                height="@(graph.Size.Height.ToString() ?? "100%")"
            >
                <defs>
                    @foreach(var def in graph.SvgComponentTypes)
                    {
                        <DynamicComponent @key="def" Type="def" />
                    }
                </defs>
                <g 
                    class="graph"
                   transform="scale(@(graph.Scale.ToInvariantString())) translate(@graph.Position.X.ToInvariantString(), @graph.Position.Y.ToInvariantString())">
                    <g class="clusters">
                        @foreach(var cluster in graph.AllClusters.Values)
                        {
                            @if (cluster != null)
                            {
                                <InteractiveDynamicComponent @key="cluster" Type="graph.GetComponentType(cluster)" Parameters="GetComponentParameter(cluster)" />
                            }
                        }
                    </g>
                    <g class="edges">
                        @foreach(var edge in graph.Edges.Values)
                        {
                            @if (edge != null)
                            {
                                <DynamicComponent @key="edge" Type="graph.GetComponentType(edge)" Parameters="GetComponentParameter(edge)" />
                            }
                        }
                    </g>
                    <g class="nodes">
                        @foreach(var node in graph.AllNodes.Values)
                        {
                            @if (node != null)
                            {
                                <InteractiveDynamicComponent @key="node" Type="graph.GetComponentType(node)" Parameters="GetComponentParameter(node)" />
                            }
                        }
                    </g>
                </g>
            </svg>
        </CascadingValue>
        <div class="graph-controls">
            <button class="btn" type="button" title="center graph">
                <svg class="icon-target">
                    <use xlink:href="#center-target" />
                </svg>
            </button>
            <button class="btn" type="button" title="zoom to fit">
                <svg class="icon-target">
                    <use xlink:href="#fit" />
                </svg>
            </button>
        </div>
    </div>
}

@code {

    ElementReference graphReference;
    bool isDirty;
    IGraphViewModel? graph;
    bool disposed;

    [Parameter] public IDagreGraphOptions? Options { get; set; }

    [Parameter] public IGraphViewModel? Graph { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Graph != null && this.graph != this.Graph)
        {
            this.graph = this.Graph;
            this.RemoveHandlers();
            this.Graph.Changed += this.TriggerRender;
            this.isDirty = true;
        }
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;

    }

    protected void TriggerRender()
    {
        this.isDirty = true;
        this.StateHasChanged();
    }

    protected virtual void RemoveHandlers()
    {
        if (this.Graph != null)
        {
            this.Graph.Changed -= this.TriggerRender;
        }
    }

    protected virtual Dictionary<string, object> GetComponentParameter(IGraphElement element)
    {
        var parameters = new Dictionary<string, object>()
        {
            { "Element", element }
        };
        return parameters;
    } 

    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.RemoveHandlers();

            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

}